find_package(jsoncpp REQUIRED CONFIG)
set(JSONCPP_STATIC_LIBS jsoncpp)
set(JSONCPP_INCLUDE_PATH $<TARGET_PROPERTY:jsoncpp_lib_static,INTERFACE_INCLUDE_DIRECTORIES>)
# set(Jsoncpp_PATH_PREFIXES /usr/local "${Jsoncpp_ROOT}" "$ENV{HOME}")
# foreach(prefix ${Jsoncpp_PATH_PREFIXES})
#     list(APPEND Jsoncpp_INCLUDE_PATHS ${prefix}/include)
#     list(APPEND Jsoncpp_LIB_PATHS ${prefix}/lib ${prefix}/lib64)
# endforeach()

# find_path(JSONCPP_INCLUDE_PATH json/json.h PATHS ${Jsoncpp_INCLUD_PATHS})
# find_file(JSONCPP_STATIC_LIB NAMES libjsoncpp.a PATHS ${Jsoncpp_LIB_PATHS})

# if(JSONCPP_INCLUDE_PATH AND JSONCPP_STATIC_LIB)
#     set(Jsoncpp_FOUND TRUE)
#     add_library(libjsoncpp STATIC IMPORTED)
#     set_target_properties(libjsoncpp PROPERTIES IMPORTED_LOCATION ${JSONCPP_STATIC_LIB})
#     target_include_directories(libjsoncpp INTERFACE ${JSONCPP_INCLUDE_PATH})
#     set(JSONCPP_STATIC_LIBS libjsoncpp)
# else()
#     set(Jsoncpp_FOUND FALSE)
# endif()

# if (Jsoncpp_FOUND)
#     if (NOT Jsoncpp_FIND_QUIETLY)
#         message(STATUS "Found libjsoncpp: ${JSONCPP_STATIC_LIBS}")
#     endif ()
# else ()
#     if (Jsoncpp_FIND_REQUIRED)
#         message(FATAL_ERROR "Could NOT find libjsoncpp")
#     endif ()
#     message(STATUS "libjsoncpp NOT found")
# endif ()

# unset(Jsoncpp_PATH_PREFIXES)
# unset(Jsoncpp_INCLUDE_PATHS)
# unset(Jsoncpp_LIB_PATHS)
# unset(JSONCPP_STATIC_LIB)

mark_as_advanced(JSONCPP_INCLUDE_PATH JSONCPP_STATIC_LIBS)
