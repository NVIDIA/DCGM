/*
 * Copyright (c) 2024, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * NOTE: This code is auto-generated by generate_nvml_stubs.py
 * DO NOT EDIT MANUALLY
 */


#pragma GCC diagnostic ignored "-Wunused-function"
// clang-format off
#include <InjectionArgument.h>
#include <limits.h>
#include <cstring>


// The following snippet is generated from write_injection_argument_cpp
namespace
{

// The following snippet is generated from write_struct_compare_declare
int nvmlPciInfo_tCompare(const nvmlPciInfo_t &a, const nvmlPciInfo_t &b);
int nvmlEccErrorCounts_tCompare(const nvmlEccErrorCounts_t &a, const nvmlEccErrorCounts_t &b);
int nvmlUtilization_tCompare(const nvmlUtilization_t &a, const nvmlUtilization_t &b);
int nvmlMemory_tCompare(const nvmlMemory_t &a, const nvmlMemory_t &b);
int nvmlMemory_v2_tCompare(const nvmlMemory_v2_t &a, const nvmlMemory_v2_t &b);
int nvmlBAR1Memory_tCompare(const nvmlBAR1Memory_t &a, const nvmlBAR1Memory_t &b);
int nvmlProcessInfo_v1_tCompare(const nvmlProcessInfo_v1_t &a, const nvmlProcessInfo_v1_t &b);
int nvmlProcessInfo_v2_tCompare(const nvmlProcessInfo_v2_t &a, const nvmlProcessInfo_v2_t &b);
int nvmlProcessInfo_tCompare(const nvmlProcessInfo_t &a, const nvmlProcessInfo_t &b);
int nvmlDeviceAttributes_tCompare(const nvmlDeviceAttributes_t &a, const nvmlDeviceAttributes_t &b);
int nvmlRowRemapperHistogramValues_tCompare(const nvmlRowRemapperHistogramValues_t &a, const nvmlRowRemapperHistogramValues_t &b);
int nvmlNvLinkUtilizationControl_tCompare(const nvmlNvLinkUtilizationControl_t &a, const nvmlNvLinkUtilizationControl_t &b);
int nvmlBridgeChipInfo_tCompare(const nvmlBridgeChipInfo_t &a, const nvmlBridgeChipInfo_t &b);
int nvmlBridgeChipHierarchy_tCompare(const nvmlBridgeChipHierarchy_t &a, const nvmlBridgeChipHierarchy_t &b);
int nvmlSample_tCompare(const nvmlSample_t &a, const nvmlSample_t &b);
int nvmlViolationTime_tCompare(const nvmlViolationTime_t &a, const nvmlViolationTime_t &b);
int nvmlClkMonFaultInfo_tCompare(const nvmlClkMonFaultInfo_t &a, const nvmlClkMonFaultInfo_t &b);
int nvmlClkMonStatus_tCompare(const nvmlClkMonStatus_t &a, const nvmlClkMonStatus_t &b);
int nvmlVgpuInstanceUtilizationSample_tCompare(const nvmlVgpuInstanceUtilizationSample_t &a, const nvmlVgpuInstanceUtilizationSample_t &b);
int nvmlVgpuProcessUtilizationSample_tCompare(const nvmlVgpuProcessUtilizationSample_t &a, const nvmlVgpuProcessUtilizationSample_t &b);
int nvmlVgpuLicenseExpiry_tCompare(const nvmlVgpuLicenseExpiry_t &a, const nvmlVgpuLicenseExpiry_t &b);
int nvmlVgpuLicenseInfo_tCompare(const nvmlVgpuLicenseInfo_t &a, const nvmlVgpuLicenseInfo_t &b);
int nvmlProcessUtilizationSample_tCompare(const nvmlProcessUtilizationSample_t &a, const nvmlProcessUtilizationSample_t &b);
int nvmlGridLicenseExpiry_tCompare(const nvmlGridLicenseExpiry_t &a, const nvmlGridLicenseExpiry_t &b);
int nvmlGridLicensableFeature_tCompare(const nvmlGridLicensableFeature_t &a, const nvmlGridLicensableFeature_t &b);
int nvmlGridLicensableFeatures_tCompare(const nvmlGridLicensableFeatures_t &a, const nvmlGridLicensableFeatures_t &b);
int nvmlFieldValue_tCompare(const nvmlFieldValue_t &a, const nvmlFieldValue_t &b);
int nvmlHwbcEntry_tCompare(const nvmlHwbcEntry_t &a, const nvmlHwbcEntry_t &b);
int nvmlLedState_tCompare(const nvmlLedState_t &a, const nvmlLedState_t &b);
int nvmlUnitInfo_tCompare(const nvmlUnitInfo_t &a, const nvmlUnitInfo_t &b);
int nvmlPSUInfo_tCompare(const nvmlPSUInfo_t &a, const nvmlPSUInfo_t &b);
int nvmlUnitFanInfo_tCompare(const nvmlUnitFanInfo_t &a, const nvmlUnitFanInfo_t &b);
int nvmlUnitFanSpeeds_tCompare(const nvmlUnitFanSpeeds_t &a, const nvmlUnitFanSpeeds_t &b);
int nvmlEventData_tCompare(const nvmlEventData_t &a, const nvmlEventData_t &b);
int nvmlAccountingStats_tCompare(const nvmlAccountingStats_t &a, const nvmlAccountingStats_t &b);
int nvmlEncoderSessionInfo_tCompare(const nvmlEncoderSessionInfo_t &a, const nvmlEncoderSessionInfo_t &b);
int nvmlFBCStats_tCompare(const nvmlFBCStats_t &a, const nvmlFBCStats_t &b);
int nvmlFBCSessionInfo_tCompare(const nvmlFBCSessionInfo_t &a, const nvmlFBCSessionInfo_t &b);
int nvmlConfComputeSystemCaps_tCompare(const nvmlConfComputeSystemCaps_t &a, const nvmlConfComputeSystemCaps_t &b);
int nvmlConfComputeSystemState_tCompare(const nvmlConfComputeSystemState_t &a, const nvmlConfComputeSystemState_t &b);
int nvmlConfComputeMemSizeInfo_tCompare(const nvmlConfComputeMemSizeInfo_t &a, const nvmlConfComputeMemSizeInfo_t &b);
int nvmlConfComputeGpuCertificate_tCompare(const nvmlConfComputeGpuCertificate_t &a, const nvmlConfComputeGpuCertificate_t &b);
int nvmlConfComputeGpuAttestationReport_tCompare(const nvmlConfComputeGpuAttestationReport_t &a, const nvmlConfComputeGpuAttestationReport_t &b);
int nvmlVgpuVersion_tCompare(const nvmlVgpuVersion_t &a, const nvmlVgpuVersion_t &b);
int nvmlVgpuMetadata_tCompare(const nvmlVgpuMetadata_t &a, const nvmlVgpuMetadata_t &b);
int nvmlVgpuPgpuMetadata_tCompare(const nvmlVgpuPgpuMetadata_t &a, const nvmlVgpuPgpuMetadata_t &b);
int nvmlVgpuPgpuCompatibility_tCompare(const nvmlVgpuPgpuCompatibility_t &a, const nvmlVgpuPgpuCompatibility_t &b);
int nvmlExcludedDeviceInfo_tCompare(const nvmlExcludedDeviceInfo_t &a, const nvmlExcludedDeviceInfo_t &b);
int nvmlGpuInstancePlacement_tCompare(const nvmlGpuInstancePlacement_t &a, const nvmlGpuInstancePlacement_t &b);
int nvmlGpuInstanceProfileInfo_tCompare(const nvmlGpuInstanceProfileInfo_t &a, const nvmlGpuInstanceProfileInfo_t &b);
int nvmlGpuInstanceProfileInfo_v2_tCompare(const nvmlGpuInstanceProfileInfo_v2_t &a, const nvmlGpuInstanceProfileInfo_v2_t &b);
int nvmlGpuInstanceInfo_tCompare(const nvmlGpuInstanceInfo_t &a, const nvmlGpuInstanceInfo_t &b);
int nvmlComputeInstancePlacement_tCompare(const nvmlComputeInstancePlacement_t &a, const nvmlComputeInstancePlacement_t &b);
int nvmlComputeInstanceProfileInfo_tCompare(const nvmlComputeInstanceProfileInfo_t &a, const nvmlComputeInstanceProfileInfo_t &b);
int nvmlComputeInstanceProfileInfo_v2_tCompare(const nvmlComputeInstanceProfileInfo_v2_t &a, const nvmlComputeInstanceProfileInfo_v2_t &b);
int nvmlComputeInstanceInfo_tCompare(const nvmlComputeInstanceInfo_t &a, const nvmlComputeInstanceInfo_t &b);
int nvmlGpmSupport_tCompare(const nvmlGpmSupport_t &a, const nvmlGpmSupport_t &b);

// The following snippet is generated from write_struct_compare_definition
int nvmlPciInfo_tCompare(const nvmlPciInfo_t &a, const nvmlPciInfo_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = strcmp(a.busIdLegacy, b.busIdLegacy); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.domain != b.domain)
    {
        return a.domain < b.domain ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.bus != b.bus)
    {
        return a.bus < b.bus ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.device != b.device)
    {
        return a.device < b.device ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.pciDeviceId != b.pciDeviceId)
    {
        return a.pciDeviceId < b.pciDeviceId ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.pciSubSystemId != b.pciSubSystemId)
    {
        return a.pciSubSystemId < b.pciSubSystemId ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = strcmp(a.busId, b.busId); ret)
    {
        return ret;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlEccErrorCounts_tCompare(const nvmlEccErrorCounts_t &a, const nvmlEccErrorCounts_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.l1Cache != b.l1Cache)
    {
        return a.l1Cache < b.l1Cache ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.l2Cache != b.l2Cache)
    {
        return a.l2Cache < b.l2Cache ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.deviceMemory != b.deviceMemory)
    {
        return a.deviceMemory < b.deviceMemory ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.registerFile != b.registerFile)
    {
        return a.registerFile < b.registerFile ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlUtilization_tCompare(const nvmlUtilization_t &a, const nvmlUtilization_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.gpu != b.gpu)
    {
        return a.gpu < b.gpu ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.memory != b.memory)
    {
        return a.memory < b.memory ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlMemory_tCompare(const nvmlMemory_t &a, const nvmlMemory_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.total != b.total)
    {
        return a.total < b.total ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.free != b.free)
    {
        return a.free < b.free ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.used != b.used)
    {
        return a.used < b.used ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlMemory_v2_tCompare(const nvmlMemory_v2_t &a, const nvmlMemory_v2_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.version != b.version)
    {
        return a.version < b.version ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.total != b.total)
    {
        return a.total < b.total ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.reserved != b.reserved)
    {
        return a.reserved < b.reserved ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.free != b.free)
    {
        return a.free < b.free ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.used != b.used)
    {
        return a.used < b.used ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlBAR1Memory_tCompare(const nvmlBAR1Memory_t &a, const nvmlBAR1Memory_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.bar1Total != b.bar1Total)
    {
        return a.bar1Total < b.bar1Total ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.bar1Free != b.bar1Free)
    {
        return a.bar1Free < b.bar1Free ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.bar1Used != b.bar1Used)
    {
        return a.bar1Used < b.bar1Used ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlProcessInfo_v1_tCompare(const nvmlProcessInfo_v1_t &a, const nvmlProcessInfo_v1_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.pid != b.pid)
    {
        return a.pid < b.pid ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.usedGpuMemory != b.usedGpuMemory)
    {
        return a.usedGpuMemory < b.usedGpuMemory ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlProcessInfo_v2_tCompare(const nvmlProcessInfo_v2_t &a, const nvmlProcessInfo_v2_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.pid != b.pid)
    {
        return a.pid < b.pid ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.usedGpuMemory != b.usedGpuMemory)
    {
        return a.usedGpuMemory < b.usedGpuMemory ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.gpuInstanceId != b.gpuInstanceId)
    {
        return a.gpuInstanceId < b.gpuInstanceId ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.computeInstanceId != b.computeInstanceId)
    {
        return a.computeInstanceId < b.computeInstanceId ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlProcessInfo_tCompare(const nvmlProcessInfo_t &a, const nvmlProcessInfo_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.pid != b.pid)
    {
        return a.pid < b.pid ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.usedGpuMemory != b.usedGpuMemory)
    {
        return a.usedGpuMemory < b.usedGpuMemory ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.gpuInstanceId != b.gpuInstanceId)
    {
        return a.gpuInstanceId < b.gpuInstanceId ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.computeInstanceId != b.computeInstanceId)
    {
        return a.computeInstanceId < b.computeInstanceId ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.usedGpuCcProtectedMemory != b.usedGpuCcProtectedMemory)
    {
        return a.usedGpuCcProtectedMemory < b.usedGpuCcProtectedMemory ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlDeviceAttributes_tCompare(const nvmlDeviceAttributes_t &a, const nvmlDeviceAttributes_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.multiprocessorCount != b.multiprocessorCount)
    {
        return a.multiprocessorCount < b.multiprocessorCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sharedCopyEngineCount != b.sharedCopyEngineCount)
    {
        return a.sharedCopyEngineCount < b.sharedCopyEngineCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sharedDecoderCount != b.sharedDecoderCount)
    {
        return a.sharedDecoderCount < b.sharedDecoderCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sharedEncoderCount != b.sharedEncoderCount)
    {
        return a.sharedEncoderCount < b.sharedEncoderCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sharedJpegCount != b.sharedJpegCount)
    {
        return a.sharedJpegCount < b.sharedJpegCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sharedOfaCount != b.sharedOfaCount)
    {
        return a.sharedOfaCount < b.sharedOfaCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.gpuInstanceSliceCount != b.gpuInstanceSliceCount)
    {
        return a.gpuInstanceSliceCount < b.gpuInstanceSliceCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.computeInstanceSliceCount != b.computeInstanceSliceCount)
    {
        return a.computeInstanceSliceCount < b.computeInstanceSliceCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.memorySizeMB != b.memorySizeMB)
    {
        return a.memorySizeMB < b.memorySizeMB ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlRowRemapperHistogramValues_tCompare(const nvmlRowRemapperHistogramValues_t &a, const nvmlRowRemapperHistogramValues_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.max != b.max)
    {
        return a.max < b.max ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.high != b.high)
    {
        return a.high < b.high ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.partial != b.partial)
    {
        return a.partial < b.partial ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.low != b.low)
    {
        return a.low < b.low ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.none != b.none)
    {
        return a.none < b.none ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlNvLinkUtilizationControl_tCompare(const nvmlNvLinkUtilizationControl_t &a, const nvmlNvLinkUtilizationControl_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.units != b.units)
    {
        return a.units < b.units ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.pktfilter != b.pktfilter)
    {
        return a.pktfilter < b.pktfilter ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlBridgeChipInfo_tCompare(const nvmlBridgeChipInfo_t &a, const nvmlBridgeChipInfo_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.type != b.type)
    {
        return a.type < b.type ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.fwVersion != b.fwVersion)
    {
        return a.fwVersion < b.fwVersion ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlBridgeChipHierarchy_tCompare(const nvmlBridgeChipHierarchy_t &a, const nvmlBridgeChipHierarchy_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.bridgeCount != b.bridgeCount)
    {
        return a.bridgeCount < b.bridgeCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    for (unsigned int i = 0; i < sizeof(a.bridgeChipInfo) / sizeof(a.bridgeChipInfo[0]); ++i)
    {
        if (auto ret = nvmlBridgeChipInfo_tCompare(a.bridgeChipInfo[i], b.bridgeChipInfo[i]); ret)
        {
            return ret;
        }
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlSample_tCompare(const nvmlSample_t &a, const nvmlSample_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.timeStamp != b.timeStamp)
    {
        return a.timeStamp < b.timeStamp ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = memcmp(&a.sampleValue, &b.sampleValue, sizeof(a.sampleValue)); ret)
    {
        return ret;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlViolationTime_tCompare(const nvmlViolationTime_t &a, const nvmlViolationTime_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.referenceTime != b.referenceTime)
    {
        return a.referenceTime < b.referenceTime ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.violationTime != b.violationTime)
    {
        return a.violationTime < b.violationTime ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlClkMonFaultInfo_tCompare(const nvmlClkMonFaultInfo_t &a, const nvmlClkMonFaultInfo_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.clkApiDomain != b.clkApiDomain)
    {
        return a.clkApiDomain < b.clkApiDomain ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.clkDomainFaultMask != b.clkDomainFaultMask)
    {
        return a.clkDomainFaultMask < b.clkDomainFaultMask ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlClkMonStatus_tCompare(const nvmlClkMonStatus_t &a, const nvmlClkMonStatus_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.bGlobalStatus != b.bGlobalStatus)
    {
        return a.bGlobalStatus < b.bGlobalStatus ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.clkMonListSize != b.clkMonListSize)
    {
        return a.clkMonListSize < b.clkMonListSize ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    for (unsigned int i = 0; i < sizeof(a.clkMonList) / sizeof(a.clkMonList[0]); ++i)
    {
        if (auto ret = nvmlClkMonFaultInfo_tCompare(a.clkMonList[i], b.clkMonList[i]); ret)
        {
            return ret;
        }
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlVgpuInstanceUtilizationSample_tCompare(const nvmlVgpuInstanceUtilizationSample_t &a, const nvmlVgpuInstanceUtilizationSample_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.vgpuInstance != b.vgpuInstance)
    {
        return a.vgpuInstance < b.vgpuInstance ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.timeStamp != b.timeStamp)
    {
        return a.timeStamp < b.timeStamp ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = memcmp(&a.smUtil, &b.smUtil, sizeof(a.smUtil)); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = memcmp(&a.memUtil, &b.memUtil, sizeof(a.memUtil)); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = memcmp(&a.encUtil, &b.encUtil, sizeof(a.encUtil)); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = memcmp(&a.decUtil, &b.decUtil, sizeof(a.decUtil)); ret)
    {
        return ret;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlVgpuProcessUtilizationSample_tCompare(const nvmlVgpuProcessUtilizationSample_t &a, const nvmlVgpuProcessUtilizationSample_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.vgpuInstance != b.vgpuInstance)
    {
        return a.vgpuInstance < b.vgpuInstance ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.pid != b.pid)
    {
        return a.pid < b.pid ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = strcmp(a.processName, b.processName); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.timeStamp != b.timeStamp)
    {
        return a.timeStamp < b.timeStamp ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.smUtil != b.smUtil)
    {
        return a.smUtil < b.smUtil ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.memUtil != b.memUtil)
    {
        return a.memUtil < b.memUtil ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.encUtil != b.encUtil)
    {
        return a.encUtil < b.encUtil ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.decUtil != b.decUtil)
    {
        return a.decUtil < b.decUtil ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlVgpuLicenseExpiry_tCompare(const nvmlVgpuLicenseExpiry_t &a, const nvmlVgpuLicenseExpiry_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.year != b.year)
    {
        return a.year < b.year ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.month != b.month)
    {
        return a.month < b.month ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.day != b.day)
    {
        return a.day < b.day ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.hour != b.hour)
    {
        return a.hour < b.hour ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.min != b.min)
    {
        return a.min < b.min ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sec != b.sec)
    {
        return a.sec < b.sec ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.status != b.status)
    {
        return a.status < b.status ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlVgpuLicenseInfo_tCompare(const nvmlVgpuLicenseInfo_t &a, const nvmlVgpuLicenseInfo_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.isLicensed != b.isLicensed)
    {
        return a.isLicensed < b.isLicensed ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = nvmlVgpuLicenseExpiry_tCompare(a.licenseExpiry, b.licenseExpiry); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.currentState != b.currentState)
    {
        return a.currentState < b.currentState ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlProcessUtilizationSample_tCompare(const nvmlProcessUtilizationSample_t &a, const nvmlProcessUtilizationSample_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.pid != b.pid)
    {
        return a.pid < b.pid ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.timeStamp != b.timeStamp)
    {
        return a.timeStamp < b.timeStamp ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.smUtil != b.smUtil)
    {
        return a.smUtil < b.smUtil ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.memUtil != b.memUtil)
    {
        return a.memUtil < b.memUtil ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.encUtil != b.encUtil)
    {
        return a.encUtil < b.encUtil ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.decUtil != b.decUtil)
    {
        return a.decUtil < b.decUtil ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlGridLicenseExpiry_tCompare(const nvmlGridLicenseExpiry_t &a, const nvmlGridLicenseExpiry_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.year != b.year)
    {
        return a.year < b.year ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.month != b.month)
    {
        return a.month < b.month ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.day != b.day)
    {
        return a.day < b.day ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.hour != b.hour)
    {
        return a.hour < b.hour ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.min != b.min)
    {
        return a.min < b.min ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sec != b.sec)
    {
        return a.sec < b.sec ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.status != b.status)
    {
        return a.status < b.status ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlGridLicensableFeature_tCompare(const nvmlGridLicensableFeature_t &a, const nvmlGridLicensableFeature_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.featureCode != b.featureCode)
    {
        return a.featureCode < b.featureCode ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.featureState != b.featureState)
    {
        return a.featureState < b.featureState ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = strcmp(a.licenseInfo, b.licenseInfo); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = strcmp(a.productName, b.productName); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.featureEnabled != b.featureEnabled)
    {
        return a.featureEnabled < b.featureEnabled ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = nvmlGridLicenseExpiry_tCompare(a.licenseExpiry, b.licenseExpiry); ret)
    {
        return ret;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlGridLicensableFeatures_tCompare(const nvmlGridLicensableFeatures_t &a, const nvmlGridLicensableFeatures_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.isGridLicenseSupported != b.isGridLicenseSupported)
    {
        return a.isGridLicenseSupported < b.isGridLicenseSupported ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.licensableFeaturesCount != b.licensableFeaturesCount)
    {
        return a.licensableFeaturesCount < b.licensableFeaturesCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    for (unsigned int i = 0; i < sizeof(a.gridLicensableFeatures) / sizeof(a.gridLicensableFeatures[0]); ++i)
    {
        if (auto ret = nvmlGridLicensableFeature_tCompare(a.gridLicensableFeatures[i], b.gridLicensableFeatures[i]); ret)
        {
            return ret;
        }
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlFieldValue_tCompare(const nvmlFieldValue_t &a, const nvmlFieldValue_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.fieldId != b.fieldId)
    {
        return a.fieldId < b.fieldId ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.scopeId != b.scopeId)
    {
        return a.scopeId < b.scopeId ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.timestamp != b.timestamp)
    {
        return a.timestamp < b.timestamp ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.latencyUsec != b.latencyUsec)
    {
        return a.latencyUsec < b.latencyUsec ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.valueType != b.valueType)
    {
        return a.valueType < b.valueType ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.nvmlReturn != b.nvmlReturn)
    {
        return a.nvmlReturn < b.nvmlReturn ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = memcmp(&a.value, &b.value, sizeof(a.value)); ret)
    {
        return ret;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlHwbcEntry_tCompare(const nvmlHwbcEntry_t &a, const nvmlHwbcEntry_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.hwbcId != b.hwbcId)
    {
        return a.hwbcId < b.hwbcId ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = strcmp(a.firmwareVersion, b.firmwareVersion); ret)
    {
        return ret;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlLedState_tCompare(const nvmlLedState_t &a, const nvmlLedState_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = strcmp(a.cause, b.cause); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.color != b.color)
    {
        return a.color < b.color ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlUnitInfo_tCompare(const nvmlUnitInfo_t &a, const nvmlUnitInfo_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = strcmp(a.name, b.name); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = strcmp(a.id, b.id); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = strcmp(a.serial, b.serial); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = strcmp(a.firmwareVersion, b.firmwareVersion); ret)
    {
        return ret;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlPSUInfo_tCompare(const nvmlPSUInfo_t &a, const nvmlPSUInfo_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = strcmp(a.state, b.state); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.current != b.current)
    {
        return a.current < b.current ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.voltage != b.voltage)
    {
        return a.voltage < b.voltage ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.power != b.power)
    {
        return a.power < b.power ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlUnitFanInfo_tCompare(const nvmlUnitFanInfo_t &a, const nvmlUnitFanInfo_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.speed != b.speed)
    {
        return a.speed < b.speed ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.state != b.state)
    {
        return a.state < b.state ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlUnitFanSpeeds_tCompare(const nvmlUnitFanSpeeds_t &a, const nvmlUnitFanSpeeds_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    for (unsigned int i = 0; i < sizeof(a.fans) / sizeof(a.fans[0]); ++i)
    {
        if (auto ret = nvmlUnitFanInfo_tCompare(a.fans[i], b.fans[i]); ret)
        {
            return ret;
        }
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.count != b.count)
    {
        return a.count < b.count ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlEventData_tCompare(const nvmlEventData_t &a, const nvmlEventData_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.device != b.device)
    {
        return a.device < b.device ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.eventType != b.eventType)
    {
        return a.eventType < b.eventType ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.eventData != b.eventData)
    {
        return a.eventData < b.eventData ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.gpuInstanceId != b.gpuInstanceId)
    {
        return a.gpuInstanceId < b.gpuInstanceId ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.computeInstanceId != b.computeInstanceId)
    {
        return a.computeInstanceId < b.computeInstanceId ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlAccountingStats_tCompare(const nvmlAccountingStats_t &a, const nvmlAccountingStats_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.gpuUtilization != b.gpuUtilization)
    {
        return a.gpuUtilization < b.gpuUtilization ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.memoryUtilization != b.memoryUtilization)
    {
        return a.memoryUtilization < b.memoryUtilization ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.maxMemoryUsage != b.maxMemoryUsage)
    {
        return a.maxMemoryUsage < b.maxMemoryUsage ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.time != b.time)
    {
        return a.time < b.time ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.startTime != b.startTime)
    {
        return a.startTime < b.startTime ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.isRunning != b.isRunning)
    {
        return a.isRunning < b.isRunning ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    for (unsigned int i = 0; i < sizeof(a.reserved) / sizeof(a.reserved[0]); ++i)
    {
        if (a.reserved[i] != b.reserved[i])
        {
            return a.reserved[i] < b.reserved[i] ? -1 : 1;
        }
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlEncoderSessionInfo_tCompare(const nvmlEncoderSessionInfo_t &a, const nvmlEncoderSessionInfo_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.sessionId != b.sessionId)
    {
        return a.sessionId < b.sessionId ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.pid != b.pid)
    {
        return a.pid < b.pid ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.vgpuInstance != b.vgpuInstance)
    {
        return a.vgpuInstance < b.vgpuInstance ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.codecType != b.codecType)
    {
        return a.codecType < b.codecType ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.hResolution != b.hResolution)
    {
        return a.hResolution < b.hResolution ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.vResolution != b.vResolution)
    {
        return a.vResolution < b.vResolution ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.averageFps != b.averageFps)
    {
        return a.averageFps < b.averageFps ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.averageLatency != b.averageLatency)
    {
        return a.averageLatency < b.averageLatency ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlFBCStats_tCompare(const nvmlFBCStats_t &a, const nvmlFBCStats_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.sessionsCount != b.sessionsCount)
    {
        return a.sessionsCount < b.sessionsCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.averageFPS != b.averageFPS)
    {
        return a.averageFPS < b.averageFPS ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.averageLatency != b.averageLatency)
    {
        return a.averageLatency < b.averageLatency ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlFBCSessionInfo_tCompare(const nvmlFBCSessionInfo_t &a, const nvmlFBCSessionInfo_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.sessionId != b.sessionId)
    {
        return a.sessionId < b.sessionId ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.pid != b.pid)
    {
        return a.pid < b.pid ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.vgpuInstance != b.vgpuInstance)
    {
        return a.vgpuInstance < b.vgpuInstance ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.displayOrdinal != b.displayOrdinal)
    {
        return a.displayOrdinal < b.displayOrdinal ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sessionType != b.sessionType)
    {
        return a.sessionType < b.sessionType ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sessionFlags != b.sessionFlags)
    {
        return a.sessionFlags < b.sessionFlags ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.hMaxResolution != b.hMaxResolution)
    {
        return a.hMaxResolution < b.hMaxResolution ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.vMaxResolution != b.vMaxResolution)
    {
        return a.vMaxResolution < b.vMaxResolution ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.hResolution != b.hResolution)
    {
        return a.hResolution < b.hResolution ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.vResolution != b.vResolution)
    {
        return a.vResolution < b.vResolution ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.averageFPS != b.averageFPS)
    {
        return a.averageFPS < b.averageFPS ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.averageLatency != b.averageLatency)
    {
        return a.averageLatency < b.averageLatency ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlConfComputeSystemCaps_tCompare(const nvmlConfComputeSystemCaps_t &a, const nvmlConfComputeSystemCaps_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.cpuCaps != b.cpuCaps)
    {
        return a.cpuCaps < b.cpuCaps ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.gpusCaps != b.gpusCaps)
    {
        return a.gpusCaps < b.gpusCaps ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlConfComputeSystemState_tCompare(const nvmlConfComputeSystemState_t &a, const nvmlConfComputeSystemState_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.environment != b.environment)
    {
        return a.environment < b.environment ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.ccFeature != b.ccFeature)
    {
        return a.ccFeature < b.ccFeature ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.devMode != b.devMode)
    {
        return a.devMode < b.devMode ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlConfComputeMemSizeInfo_tCompare(const nvmlConfComputeMemSizeInfo_t &a, const nvmlConfComputeMemSizeInfo_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.protectedMemSizeKib != b.protectedMemSizeKib)
    {
        return a.protectedMemSizeKib < b.protectedMemSizeKib ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.unprotectedMemSizeKib != b.unprotectedMemSizeKib)
    {
        return a.unprotectedMemSizeKib < b.unprotectedMemSizeKib ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlConfComputeGpuCertificate_tCompare(const nvmlConfComputeGpuCertificate_t &a, const nvmlConfComputeGpuCertificate_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.certChainSize != b.certChainSize)
    {
        return a.certChainSize < b.certChainSize ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.attestationCertChainSize != b.attestationCertChainSize)
    {
        return a.attestationCertChainSize < b.attestationCertChainSize ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = memcmp(a.certChain, b.certChain, sizeof(a.certChain)); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = memcmp(a.attestationCertChain, b.attestationCertChain, sizeof(a.attestationCertChain)); ret)
    {
        return ret;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlConfComputeGpuAttestationReport_tCompare(const nvmlConfComputeGpuAttestationReport_t &a, const nvmlConfComputeGpuAttestationReport_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.isCecAttestationReportPresent != b.isCecAttestationReportPresent)
    {
        return a.isCecAttestationReportPresent < b.isCecAttestationReportPresent ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.attestationReportSize != b.attestationReportSize)
    {
        return a.attestationReportSize < b.attestationReportSize ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.cecAttestationReportSize != b.cecAttestationReportSize)
    {
        return a.cecAttestationReportSize < b.cecAttestationReportSize ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = memcmp(a.nonce, b.nonce, sizeof(a.nonce)); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = memcmp(a.attestationReport, b.attestationReport, sizeof(a.attestationReport)); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = memcmp(a.cecAttestationReport, b.cecAttestationReport, sizeof(a.cecAttestationReport)); ret)
    {
        return ret;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlVgpuVersion_tCompare(const nvmlVgpuVersion_t &a, const nvmlVgpuVersion_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.minVersion != b.minVersion)
    {
        return a.minVersion < b.minVersion ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.maxVersion != b.maxVersion)
    {
        return a.maxVersion < b.maxVersion ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlVgpuMetadata_tCompare(const nvmlVgpuMetadata_t &a, const nvmlVgpuMetadata_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.version != b.version)
    {
        return a.version < b.version ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.revision != b.revision)
    {
        return a.revision < b.revision ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.guestInfoState != b.guestInfoState)
    {
        return a.guestInfoState < b.guestInfoState ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = strcmp(a.guestDriverVersion, b.guestDriverVersion); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = strcmp(a.hostDriverVersion, b.hostDriverVersion); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    for (unsigned int i = 0; i < sizeof(a.reserved) / sizeof(a.reserved[0]); ++i)
    {
        if (a.reserved[i] != b.reserved[i])
        {
            return a.reserved[i] < b.reserved[i] ? -1 : 1;
        }
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.vgpuVirtualizationCaps != b.vgpuVirtualizationCaps)
    {
        return a.vgpuVirtualizationCaps < b.vgpuVirtualizationCaps ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.guestVgpuVersion != b.guestVgpuVersion)
    {
        return a.guestVgpuVersion < b.guestVgpuVersion ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.opaqueDataSize != b.opaqueDataSize)
    {
        return a.opaqueDataSize < b.opaqueDataSize ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = strcmp(a.opaqueData, b.opaqueData); ret)
    {
        return ret;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlVgpuPgpuMetadata_tCompare(const nvmlVgpuPgpuMetadata_t &a, const nvmlVgpuPgpuMetadata_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.version != b.version)
    {
        return a.version < b.version ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.revision != b.revision)
    {
        return a.revision < b.revision ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = strcmp(a.hostDriverVersion, b.hostDriverVersion); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.pgpuVirtualizationCaps != b.pgpuVirtualizationCaps)
    {
        return a.pgpuVirtualizationCaps < b.pgpuVirtualizationCaps ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    for (unsigned int i = 0; i < sizeof(a.reserved) / sizeof(a.reserved[0]); ++i)
    {
        if (a.reserved[i] != b.reserved[i])
        {
            return a.reserved[i] < b.reserved[i] ? -1 : 1;
        }
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = nvmlVgpuVersion_tCompare(a.hostSupportedVgpuRange, b.hostSupportedVgpuRange); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.opaqueDataSize != b.opaqueDataSize)
    {
        return a.opaqueDataSize < b.opaqueDataSize ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = strcmp(a.opaqueData, b.opaqueData); ret)
    {
        return ret;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlVgpuPgpuCompatibility_tCompare(const nvmlVgpuPgpuCompatibility_t &a, const nvmlVgpuPgpuCompatibility_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.vgpuVmCompatibility != b.vgpuVmCompatibility)
    {
        return a.vgpuVmCompatibility < b.vgpuVmCompatibility ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.compatibilityLimitCode != b.compatibilityLimitCode)
    {
        return a.compatibilityLimitCode < b.compatibilityLimitCode ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlExcludedDeviceInfo_tCompare(const nvmlExcludedDeviceInfo_t &a, const nvmlExcludedDeviceInfo_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = nvmlPciInfo_tCompare(a.pciInfo, b.pciInfo); ret)
    {
        return ret;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = strcmp(a.uuid, b.uuid); ret)
    {
        return ret;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlGpuInstancePlacement_tCompare(const nvmlGpuInstancePlacement_t &a, const nvmlGpuInstancePlacement_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.start != b.start)
    {
        return a.start < b.start ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.size != b.size)
    {
        return a.size < b.size ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlGpuInstanceProfileInfo_tCompare(const nvmlGpuInstanceProfileInfo_t &a, const nvmlGpuInstanceProfileInfo_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.id != b.id)
    {
        return a.id < b.id ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.isP2pSupported != b.isP2pSupported)
    {
        return a.isP2pSupported < b.isP2pSupported ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sliceCount != b.sliceCount)
    {
        return a.sliceCount < b.sliceCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.instanceCount != b.instanceCount)
    {
        return a.instanceCount < b.instanceCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.multiprocessorCount != b.multiprocessorCount)
    {
        return a.multiprocessorCount < b.multiprocessorCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.copyEngineCount != b.copyEngineCount)
    {
        return a.copyEngineCount < b.copyEngineCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.decoderCount != b.decoderCount)
    {
        return a.decoderCount < b.decoderCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.encoderCount != b.encoderCount)
    {
        return a.encoderCount < b.encoderCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.jpegCount != b.jpegCount)
    {
        return a.jpegCount < b.jpegCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.ofaCount != b.ofaCount)
    {
        return a.ofaCount < b.ofaCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.memorySizeMB != b.memorySizeMB)
    {
        return a.memorySizeMB < b.memorySizeMB ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlGpuInstanceProfileInfo_v2_tCompare(const nvmlGpuInstanceProfileInfo_v2_t &a, const nvmlGpuInstanceProfileInfo_v2_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.version != b.version)
    {
        return a.version < b.version ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.id != b.id)
    {
        return a.id < b.id ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.isP2pSupported != b.isP2pSupported)
    {
        return a.isP2pSupported < b.isP2pSupported ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sliceCount != b.sliceCount)
    {
        return a.sliceCount < b.sliceCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.instanceCount != b.instanceCount)
    {
        return a.instanceCount < b.instanceCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.multiprocessorCount != b.multiprocessorCount)
    {
        return a.multiprocessorCount < b.multiprocessorCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.copyEngineCount != b.copyEngineCount)
    {
        return a.copyEngineCount < b.copyEngineCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.decoderCount != b.decoderCount)
    {
        return a.decoderCount < b.decoderCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.encoderCount != b.encoderCount)
    {
        return a.encoderCount < b.encoderCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.jpegCount != b.jpegCount)
    {
        return a.jpegCount < b.jpegCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.ofaCount != b.ofaCount)
    {
        return a.ofaCount < b.ofaCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.memorySizeMB != b.memorySizeMB)
    {
        return a.memorySizeMB < b.memorySizeMB ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = strcmp(a.name, b.name); ret)
    {
        return ret;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlGpuInstanceInfo_tCompare(const nvmlGpuInstanceInfo_t &a, const nvmlGpuInstanceInfo_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.device != b.device)
    {
        return a.device < b.device ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.id != b.id)
    {
        return a.id < b.id ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.profileId != b.profileId)
    {
        return a.profileId < b.profileId ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = nvmlGpuInstancePlacement_tCompare(a.placement, b.placement); ret)
    {
        return ret;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlComputeInstancePlacement_tCompare(const nvmlComputeInstancePlacement_t &a, const nvmlComputeInstancePlacement_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.start != b.start)
    {
        return a.start < b.start ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.size != b.size)
    {
        return a.size < b.size ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlComputeInstanceProfileInfo_tCompare(const nvmlComputeInstanceProfileInfo_t &a, const nvmlComputeInstanceProfileInfo_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.id != b.id)
    {
        return a.id < b.id ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sliceCount != b.sliceCount)
    {
        return a.sliceCount < b.sliceCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.instanceCount != b.instanceCount)
    {
        return a.instanceCount < b.instanceCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.multiprocessorCount != b.multiprocessorCount)
    {
        return a.multiprocessorCount < b.multiprocessorCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sharedCopyEngineCount != b.sharedCopyEngineCount)
    {
        return a.sharedCopyEngineCount < b.sharedCopyEngineCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sharedDecoderCount != b.sharedDecoderCount)
    {
        return a.sharedDecoderCount < b.sharedDecoderCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sharedEncoderCount != b.sharedEncoderCount)
    {
        return a.sharedEncoderCount < b.sharedEncoderCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sharedJpegCount != b.sharedJpegCount)
    {
        return a.sharedJpegCount < b.sharedJpegCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sharedOfaCount != b.sharedOfaCount)
    {
        return a.sharedOfaCount < b.sharedOfaCount ? -1 : 1;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlComputeInstanceProfileInfo_v2_tCompare(const nvmlComputeInstanceProfileInfo_v2_t &a, const nvmlComputeInstanceProfileInfo_v2_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.version != b.version)
    {
        return a.version < b.version ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.id != b.id)
    {
        return a.id < b.id ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sliceCount != b.sliceCount)
    {
        return a.sliceCount < b.sliceCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.instanceCount != b.instanceCount)
    {
        return a.instanceCount < b.instanceCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.multiprocessorCount != b.multiprocessorCount)
    {
        return a.multiprocessorCount < b.multiprocessorCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sharedCopyEngineCount != b.sharedCopyEngineCount)
    {
        return a.sharedCopyEngineCount < b.sharedCopyEngineCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sharedDecoderCount != b.sharedDecoderCount)
    {
        return a.sharedDecoderCount < b.sharedDecoderCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sharedEncoderCount != b.sharedEncoderCount)
    {
        return a.sharedEncoderCount < b.sharedEncoderCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sharedJpegCount != b.sharedJpegCount)
    {
        return a.sharedJpegCount < b.sharedJpegCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.sharedOfaCount != b.sharedOfaCount)
    {
        return a.sharedOfaCount < b.sharedOfaCount ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = strcmp(a.name, b.name); ret)
    {
        return ret;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlComputeInstanceInfo_tCompare(const nvmlComputeInstanceInfo_t &a, const nvmlComputeInstanceInfo_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.device != b.device)
    {
        return a.device < b.device ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.gpuInstance != b.gpuInstance)
    {
        return a.gpuInstance < b.gpuInstance ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.id != b.id)
    {
        return a.id < b.id ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.profileId != b.profileId)
    {
        return a.profileId < b.profileId ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (auto ret = nvmlComputeInstancePlacement_tCompare(a.placement, b.placement); ret)
    {
        return ret;
    }
    return 0;
}

// The following snippet is generated from write_struct_compare_definition
int nvmlGpmSupport_tCompare(const nvmlGpmSupport_t &a, const nvmlGpmSupport_t &b)
{
    // The following snippet is generated from write_struct_compare_definition
    if (a.version != b.version)
    {
        return a.version < b.version ? -1 : 1;
    }
    // The following snippet is generated from write_struct_compare_definition
    if (a.isSupportedDevice != b.isSupportedDevice)
    {
        return a.isSupportedDevice < b.isSupportedDevice ? -1 : 1;
    }
    return 0;
}

}

// The following snippet is generated from write_injection_argument_cpp
nvmlReturn_t InjectionArgument::SetValueFrom(const InjectionArgument &other)
{
    bool set = false;

    if (other.IsEmpty())
    {
        return NVML_ERROR_NOT_FOUND;
    }
    switch (this->m_type)
    {
        // The following snippet is generated from write_case_entry
        case INJECTION_CHAR:
        {
            if (other.m_type == INJECTION_CHAR)
            {
                // The following snippet is generated from print_equals_and_set
                std::memcpy(&this->m_value.c, &other.m_value.c, sizeof(*&this->m_value.c));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_CHAR_PTR)
            {
                // The following snippet is generated from print_equals_and_set
                std::memcpy(&this->m_value.c, other.m_value.str, sizeof(*&this->m_value.c));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_CHAR_PTR:
        {
            if (other.m_type == INJECTION_CHAR_PTR)
            {
                return NVML_ERROR_INVALID_ARGUMENT;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_CHAR)
            {
                // The following snippet is generated from print_equals_and_set
                std::memcpy(this->m_value.str, &other.m_value.str, sizeof(*this->m_value.str));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_INT:
        {
            if (other.m_type == INJECTION_INT)
            {
                // The following snippet is generated from print_equals_and_set
                std::memcpy(&this->m_value.i, &other.m_value.i, sizeof(*&this->m_value.i));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_INT_PTR)
            {
                // The following snippet is generated from print_equals_and_set
                std::memcpy(&this->m_value.i, other.m_value.iPtr, sizeof(*&this->m_value.i));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_UINT && other.m_value.ui <= INT_MAX)
            {
                this->m_value.i = other.m_value.ui;
                set = true;
            }
            else if (other.m_type == INJECTION_UINT_PTR && *other.m_value.uiPtr <= INT_MAX)
            {
                this->m_value.i = *other.m_value.uiPtr;
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_INT_PTR:
        {
            if (other.m_type == INJECTION_INT_PTR)
            {
                // The following snippet is generated from print_equals_and_set
                std::memcpy(this->m_value.iPtr, other.m_value.iPtr, sizeof(*this->m_value.iPtr) * (other.m_isArray ? other.m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_INT)
            {
                // The following snippet is generated from print_equals_and_set
                std::memcpy(this->m_value.iPtr, &other.m_value.i, sizeof(*this->m_value.iPtr));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_UINT && other.m_value.ui <= INT_MAX)
            {
                *this->m_value.iPtr = other.m_value.ui;
                set = true;
            }
            else if (other.m_type == INJECTION_UINT_PTR && *other.m_value.uiPtr <= INT_MAX)
            {
                *this->m_value.iPtr = *other.m_value.uiPtr;
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_ACCOUNTINGSTATS:
        {
            if (other.m_type == INJECTION_ACCOUNTINGSTATS)
            {
                memcpy(&m_value.accountingStats, &other.m_value.accountingStats, sizeof(m_value.accountingStats));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_ACCOUNTINGSTATS_PTR)
            {
                memcpy(&m_value.accountingStats, other.m_value.accountingStatsPtr, sizeof(m_value.accountingStats));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_ACCOUNTINGSTATS_PTR:
        {
            if (other.m_type == INJECTION_ACCOUNTINGSTATS_PTR)
            {
                memcpy(m_value.accountingStatsPtr, other.m_value.accountingStatsPtr, sizeof(*m_value.accountingStatsPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_ACCOUNTINGSTATS)
            {
                memcpy(m_value.accountingStatsPtr, &other.m_value.accountingStats, sizeof(*m_value.accountingStatsPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_BAR1MEMORY:
        {
            if (other.m_type == INJECTION_BAR1MEMORY)
            {
                memcpy(&m_value.bar1Memory, &other.m_value.bar1Memory, sizeof(m_value.bar1Memory));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_BAR1MEMORY_PTR)
            {
                memcpy(&m_value.bar1Memory, other.m_value.bar1MemoryPtr, sizeof(m_value.bar1Memory));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_BAR1MEMORY_PTR:
        {
            if (other.m_type == INJECTION_BAR1MEMORY_PTR)
            {
                memcpy(m_value.bar1MemoryPtr, other.m_value.bar1MemoryPtr, sizeof(*m_value.bar1MemoryPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_BAR1MEMORY)
            {
                memcpy(m_value.bar1MemoryPtr, &other.m_value.bar1Memory, sizeof(*m_value.bar1MemoryPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_BRANDTYPE:
        {
            if (other.m_type == INJECTION_BRANDTYPE)
            {
                memcpy(&m_value.brandType, &other.m_value.brandType, sizeof(m_value.brandType));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_BRANDTYPE_PTR)
            {
                memcpy(&m_value.brandType, other.m_value.brandTypePtr, sizeof(m_value.brandType));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_BRANDTYPE_PTR:
        {
            if (other.m_type == INJECTION_BRANDTYPE_PTR)
            {
                memcpy(m_value.brandTypePtr, other.m_value.brandTypePtr, sizeof(*m_value.brandTypePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_BRANDTYPE)
            {
                memcpy(m_value.brandTypePtr, &other.m_value.brandType, sizeof(*m_value.brandTypePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_BRIDGECHIPHIERARCHY:
        {
            if (other.m_type == INJECTION_BRIDGECHIPHIERARCHY)
            {
                memcpy(&m_value.bridgeChipHierarchy, &other.m_value.bridgeChipHierarchy, sizeof(m_value.bridgeChipHierarchy));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_BRIDGECHIPHIERARCHY_PTR)
            {
                memcpy(&m_value.bridgeChipHierarchy, other.m_value.bridgeChipHierarchyPtr, sizeof(m_value.bridgeChipHierarchy));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_BRIDGECHIPHIERARCHY_PTR:
        {
            if (other.m_type == INJECTION_BRIDGECHIPHIERARCHY_PTR)
            {
                memcpy(m_value.bridgeChipHierarchyPtr, other.m_value.bridgeChipHierarchyPtr, sizeof(*m_value.bridgeChipHierarchyPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_BRIDGECHIPHIERARCHY)
            {
                memcpy(m_value.bridgeChipHierarchyPtr, &other.m_value.bridgeChipHierarchy, sizeof(*m_value.bridgeChipHierarchyPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_CLOCKID:
        {
            if (other.m_type == INJECTION_CLOCKID)
            {
                memcpy(&m_value.clockId, &other.m_value.clockId, sizeof(m_value.clockId));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_CLOCKTYPE:
        {
            if (other.m_type == INJECTION_CLOCKTYPE)
            {
                memcpy(&m_value.clockType, &other.m_value.clockType, sizeof(m_value.clockType));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_COMPUTEINSTANCEINFO:
        {
            if (other.m_type == INJECTION_COMPUTEINSTANCEINFO)
            {
                memcpy(&m_value.computeInstanceInfo, &other.m_value.computeInstanceInfo, sizeof(m_value.computeInstanceInfo));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_COMPUTEINSTANCEINFO_PTR)
            {
                memcpy(&m_value.computeInstanceInfo, other.m_value.computeInstanceInfoPtr, sizeof(m_value.computeInstanceInfo));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_COMPUTEINSTANCEINFO_PTR:
        {
            if (other.m_type == INJECTION_COMPUTEINSTANCEINFO_PTR)
            {
                memcpy(m_value.computeInstanceInfoPtr, other.m_value.computeInstanceInfoPtr, sizeof(*m_value.computeInstanceInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_COMPUTEINSTANCEINFO)
            {
                memcpy(m_value.computeInstanceInfoPtr, &other.m_value.computeInstanceInfo, sizeof(*m_value.computeInstanceInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_COMPUTEINSTANCEPROFILEINFO:
        {
            if (other.m_type == INJECTION_COMPUTEINSTANCEPROFILEINFO)
            {
                memcpy(&m_value.computeInstanceProfileInfo, &other.m_value.computeInstanceProfileInfo, sizeof(m_value.computeInstanceProfileInfo));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_COMPUTEINSTANCEPROFILEINFO_PTR)
            {
                memcpy(&m_value.computeInstanceProfileInfo, other.m_value.computeInstanceProfileInfoPtr, sizeof(m_value.computeInstanceProfileInfo));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_COMPUTEINSTANCEPROFILEINFO_PTR:
        {
            if (other.m_type == INJECTION_COMPUTEINSTANCEPROFILEINFO_PTR)
            {
                memcpy(m_value.computeInstanceProfileInfoPtr, other.m_value.computeInstanceProfileInfoPtr, sizeof(*m_value.computeInstanceProfileInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_COMPUTEINSTANCEPROFILEINFO)
            {
                memcpy(m_value.computeInstanceProfileInfoPtr, &other.m_value.computeInstanceProfileInfo, sizeof(*m_value.computeInstanceProfileInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_COMPUTEINSTANCEPROFILEINFO_V2:
        {
            if (other.m_type == INJECTION_COMPUTEINSTANCEPROFILEINFO_V2)
            {
                memcpy(&m_value.computeInstanceProfileInfo_v2, &other.m_value.computeInstanceProfileInfo_v2, sizeof(m_value.computeInstanceProfileInfo_v2));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_COMPUTEINSTANCEPROFILEINFO_V2_PTR)
            {
                memcpy(&m_value.computeInstanceProfileInfo_v2, other.m_value.computeInstanceProfileInfo_v2Ptr, sizeof(m_value.computeInstanceProfileInfo_v2));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_COMPUTEINSTANCEPROFILEINFO_V2_PTR:
        {
            if (other.m_type == INJECTION_COMPUTEINSTANCEPROFILEINFO_V2_PTR)
            {
                memcpy(m_value.computeInstanceProfileInfo_v2Ptr, other.m_value.computeInstanceProfileInfo_v2Ptr, sizeof(*m_value.computeInstanceProfileInfo_v2Ptr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_COMPUTEINSTANCEPROFILEINFO_V2)
            {
                memcpy(m_value.computeInstanceProfileInfo_v2Ptr, &other.m_value.computeInstanceProfileInfo_v2, sizeof(*m_value.computeInstanceProfileInfo_v2Ptr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_COMPUTEINSTANCE:
        {
            if (other.m_type == INJECTION_COMPUTEINSTANCE)
            {
                memcpy(&m_value.computeInstance, &other.m_value.computeInstance, sizeof(m_value.computeInstance));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_COMPUTEINSTANCE_PTR)
            {
                memcpy(&m_value.computeInstance, other.m_value.computeInstancePtr, sizeof(m_value.computeInstance));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_COMPUTEINSTANCE_PTR:
        {
            if (other.m_type == INJECTION_COMPUTEINSTANCE_PTR)
            {
                memcpy(m_value.computeInstancePtr, other.m_value.computeInstancePtr, sizeof(*m_value.computeInstancePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_COMPUTEINSTANCE)
            {
                memcpy(m_value.computeInstancePtr, &other.m_value.computeInstance, sizeof(*m_value.computeInstancePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_COMPUTEMODE:
        {
            if (other.m_type == INJECTION_COMPUTEMODE)
            {
                memcpy(&m_value.computeMode, &other.m_value.computeMode, sizeof(m_value.computeMode));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_COMPUTEMODE_PTR)
            {
                memcpy(&m_value.computeMode, other.m_value.computeModePtr, sizeof(m_value.computeMode));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_COMPUTEMODE_PTR:
        {
            if (other.m_type == INJECTION_COMPUTEMODE_PTR)
            {
                memcpy(m_value.computeModePtr, other.m_value.computeModePtr, sizeof(*m_value.computeModePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_COMPUTEMODE)
            {
                memcpy(m_value.computeModePtr, &other.m_value.computeMode, sizeof(*m_value.computeModePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_CONFCOMPUTESYSTEMSTATE:
        {
            if (other.m_type == INJECTION_CONFCOMPUTESYSTEMSTATE)
            {
                memcpy(&m_value.confComputeSystemState, &other.m_value.confComputeSystemState, sizeof(m_value.confComputeSystemState));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_CONFCOMPUTESYSTEMSTATE_PTR)
            {
                memcpy(&m_value.confComputeSystemState, other.m_value.confComputeSystemStatePtr, sizeof(m_value.confComputeSystemState));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_CONFCOMPUTESYSTEMSTATE_PTR:
        {
            if (other.m_type == INJECTION_CONFCOMPUTESYSTEMSTATE_PTR)
            {
                memcpy(m_value.confComputeSystemStatePtr, other.m_value.confComputeSystemStatePtr, sizeof(*m_value.confComputeSystemStatePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_CONFCOMPUTESYSTEMSTATE)
            {
                memcpy(m_value.confComputeSystemStatePtr, &other.m_value.confComputeSystemState, sizeof(*m_value.confComputeSystemStatePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_DETACHGPUSTATE:
        {
            if (other.m_type == INJECTION_DETACHGPUSTATE)
            {
                memcpy(&m_value.detachGpuState, &other.m_value.detachGpuState, sizeof(m_value.detachGpuState));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_DEVICEATTRIBUTES:
        {
            if (other.m_type == INJECTION_DEVICEATTRIBUTES)
            {
                memcpy(&m_value.deviceAttributes, &other.m_value.deviceAttributes, sizeof(m_value.deviceAttributes));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_DEVICEATTRIBUTES_PTR)
            {
                memcpy(&m_value.deviceAttributes, other.m_value.deviceAttributesPtr, sizeof(m_value.deviceAttributes));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_DEVICEATTRIBUTES_PTR:
        {
            if (other.m_type == INJECTION_DEVICEATTRIBUTES_PTR)
            {
                memcpy(m_value.deviceAttributesPtr, other.m_value.deviceAttributesPtr, sizeof(*m_value.deviceAttributesPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_DEVICEATTRIBUTES)
            {
                memcpy(m_value.deviceAttributesPtr, &other.m_value.deviceAttributes, sizeof(*m_value.deviceAttributesPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_DEVICE:
        {
            if (other.m_type == INJECTION_DEVICE)
            {
                memcpy(&m_value.device, &other.m_value.device, sizeof(m_value.device));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_DEVICE_PTR)
            {
                memcpy(&m_value.device, other.m_value.devicePtr, sizeof(m_value.device));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_DEVICE_PTR:
        {
            if (other.m_type == INJECTION_DEVICE_PTR)
            {
                memcpy(m_value.devicePtr, other.m_value.devicePtr, sizeof(*m_value.devicePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_DEVICE)
            {
                memcpy(m_value.devicePtr, &other.m_value.device, sizeof(*m_value.devicePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_DRIVERMODEL:
        {
            if (other.m_type == INJECTION_DRIVERMODEL)
            {
                memcpy(&m_value.driverModel, &other.m_value.driverModel, sizeof(m_value.driverModel));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_DRIVERMODEL_PTR)
            {
                memcpy(&m_value.driverModel, other.m_value.driverModelPtr, sizeof(m_value.driverModel));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_DRIVERMODEL_PTR:
        {
            if (other.m_type == INJECTION_DRIVERMODEL_PTR)
            {
                memcpy(m_value.driverModelPtr, other.m_value.driverModelPtr, sizeof(*m_value.driverModelPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_DRIVERMODEL)
            {
                memcpy(m_value.driverModelPtr, &other.m_value.driverModel, sizeof(*m_value.driverModelPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_ECCCOUNTERTYPE:
        {
            if (other.m_type == INJECTION_ECCCOUNTERTYPE)
            {
                memcpy(&m_value.eccCounterType, &other.m_value.eccCounterType, sizeof(m_value.eccCounterType));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_ECCERRORCOUNTS:
        {
            if (other.m_type == INJECTION_ECCERRORCOUNTS)
            {
                memcpy(&m_value.eccErrorCounts, &other.m_value.eccErrorCounts, sizeof(m_value.eccErrorCounts));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_ECCERRORCOUNTS_PTR)
            {
                memcpy(&m_value.eccErrorCounts, other.m_value.eccErrorCountsPtr, sizeof(m_value.eccErrorCounts));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_ECCERRORCOUNTS_PTR:
        {
            if (other.m_type == INJECTION_ECCERRORCOUNTS_PTR)
            {
                memcpy(m_value.eccErrorCountsPtr, other.m_value.eccErrorCountsPtr, sizeof(*m_value.eccErrorCountsPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_ECCERRORCOUNTS)
            {
                memcpy(m_value.eccErrorCountsPtr, &other.m_value.eccErrorCounts, sizeof(*m_value.eccErrorCountsPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_ENABLESTATE:
        {
            if (other.m_type == INJECTION_ENABLESTATE)
            {
                memcpy(&m_value.enableState, &other.m_value.enableState, sizeof(m_value.enableState));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_ENABLESTATE_PTR)
            {
                memcpy(&m_value.enableState, other.m_value.enableStatePtr, sizeof(m_value.enableState));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_ENABLESTATE_PTR:
        {
            if (other.m_type == INJECTION_ENABLESTATE_PTR)
            {
                memcpy(m_value.enableStatePtr, other.m_value.enableStatePtr, sizeof(*m_value.enableStatePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_ENABLESTATE)
            {
                memcpy(m_value.enableStatePtr, &other.m_value.enableState, sizeof(*m_value.enableStatePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_ENCODERSESSIONINFO:
        {
            if (other.m_type == INJECTION_ENCODERSESSIONINFO)
            {
                memcpy(&m_value.encoderSessionInfo, &other.m_value.encoderSessionInfo, sizeof(m_value.encoderSessionInfo));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_ENCODERSESSIONINFO_PTR)
            {
                memcpy(&m_value.encoderSessionInfo, other.m_value.encoderSessionInfoPtr, sizeof(m_value.encoderSessionInfo));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_ENCODERSESSIONINFO_PTR:
        {
            if (other.m_type == INJECTION_ENCODERSESSIONINFO_PTR)
            {
                memcpy(m_value.encoderSessionInfoPtr, other.m_value.encoderSessionInfoPtr, sizeof(*m_value.encoderSessionInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_ENCODERSESSIONINFO)
            {
                memcpy(m_value.encoderSessionInfoPtr, &other.m_value.encoderSessionInfo, sizeof(*m_value.encoderSessionInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_ENCODERTYPE:
        {
            if (other.m_type == INJECTION_ENCODERTYPE)
            {
                memcpy(&m_value.encoderType, &other.m_value.encoderType, sizeof(m_value.encoderType));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_EVENTDATA:
        {
            if (other.m_type == INJECTION_EVENTDATA)
            {
                memcpy(&m_value.eventData, &other.m_value.eventData, sizeof(m_value.eventData));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_EVENTDATA_PTR)
            {
                memcpy(&m_value.eventData, other.m_value.eventDataPtr, sizeof(m_value.eventData));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_EVENTDATA_PTR:
        {
            if (other.m_type == INJECTION_EVENTDATA_PTR)
            {
                memcpy(m_value.eventDataPtr, other.m_value.eventDataPtr, sizeof(*m_value.eventDataPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_EVENTDATA)
            {
                memcpy(m_value.eventDataPtr, &other.m_value.eventData, sizeof(*m_value.eventDataPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_EVENTSET:
        {
            if (other.m_type == INJECTION_EVENTSET)
            {
                memcpy(&m_value.eventSet, &other.m_value.eventSet, sizeof(m_value.eventSet));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_EVENTSET_PTR)
            {
                memcpy(&m_value.eventSet, other.m_value.eventSetPtr, sizeof(m_value.eventSet));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_EVENTSET_PTR:
        {
            if (other.m_type == INJECTION_EVENTSET_PTR)
            {
                memcpy(m_value.eventSetPtr, other.m_value.eventSetPtr, sizeof(*m_value.eventSetPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_EVENTSET)
            {
                memcpy(m_value.eventSetPtr, &other.m_value.eventSet, sizeof(*m_value.eventSetPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_EXCLUDEDDEVICEINFO:
        {
            if (other.m_type == INJECTION_EXCLUDEDDEVICEINFO)
            {
                memcpy(&m_value.excludedDeviceInfo, &other.m_value.excludedDeviceInfo, sizeof(m_value.excludedDeviceInfo));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_EXCLUDEDDEVICEINFO_PTR)
            {
                memcpy(&m_value.excludedDeviceInfo, other.m_value.excludedDeviceInfoPtr, sizeof(m_value.excludedDeviceInfo));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_EXCLUDEDDEVICEINFO_PTR:
        {
            if (other.m_type == INJECTION_EXCLUDEDDEVICEINFO_PTR)
            {
                memcpy(m_value.excludedDeviceInfoPtr, other.m_value.excludedDeviceInfoPtr, sizeof(*m_value.excludedDeviceInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_EXCLUDEDDEVICEINFO)
            {
                memcpy(m_value.excludedDeviceInfoPtr, &other.m_value.excludedDeviceInfo, sizeof(*m_value.excludedDeviceInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_FBCSESSIONINFO:
        {
            if (other.m_type == INJECTION_FBCSESSIONINFO)
            {
                memcpy(&m_value.fBCSessionInfo, &other.m_value.fBCSessionInfo, sizeof(m_value.fBCSessionInfo));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_FBCSESSIONINFO_PTR)
            {
                memcpy(&m_value.fBCSessionInfo, other.m_value.fBCSessionInfoPtr, sizeof(m_value.fBCSessionInfo));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_FBCSESSIONINFO_PTR:
        {
            if (other.m_type == INJECTION_FBCSESSIONINFO_PTR)
            {
                memcpy(m_value.fBCSessionInfoPtr, other.m_value.fBCSessionInfoPtr, sizeof(*m_value.fBCSessionInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_FBCSESSIONINFO)
            {
                memcpy(m_value.fBCSessionInfoPtr, &other.m_value.fBCSessionInfo, sizeof(*m_value.fBCSessionInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_FBCSTATS:
        {
            if (other.m_type == INJECTION_FBCSTATS)
            {
                memcpy(&m_value.fBCStats, &other.m_value.fBCStats, sizeof(m_value.fBCStats));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_FBCSTATS_PTR)
            {
                memcpy(&m_value.fBCStats, other.m_value.fBCStatsPtr, sizeof(m_value.fBCStats));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_FBCSTATS_PTR:
        {
            if (other.m_type == INJECTION_FBCSTATS_PTR)
            {
                memcpy(m_value.fBCStatsPtr, other.m_value.fBCStatsPtr, sizeof(*m_value.fBCStatsPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_FBCSTATS)
            {
                memcpy(m_value.fBCStatsPtr, &other.m_value.fBCStats, sizeof(*m_value.fBCStatsPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_FIELDVALUE:
        {
            if (other.m_type == INJECTION_FIELDVALUE)
            {
                memcpy(&m_value.fieldValue, &other.m_value.fieldValue, sizeof(m_value.fieldValue));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_FIELDVALUE_PTR)
            {
                memcpy(&m_value.fieldValue, other.m_value.fieldValuePtr, sizeof(m_value.fieldValue));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_FIELDVALUE_PTR:
        {
            if (other.m_type == INJECTION_FIELDVALUE_PTR)
            {
                memcpy(m_value.fieldValuePtr, other.m_value.fieldValuePtr, sizeof(*m_value.fieldValuePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_FIELDVALUE)
            {
                memcpy(m_value.fieldValuePtr, &other.m_value.fieldValue, sizeof(*m_value.fieldValuePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPMMETRICSGET:
        {
            if (other.m_type == INJECTION_GPMMETRICSGET)
            {
                memcpy(&m_value.gpmMetricsGet, &other.m_value.gpmMetricsGet, sizeof(m_value.gpmMetricsGet));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPMMETRICSGET_PTR)
            {
                memcpy(&m_value.gpmMetricsGet, other.m_value.gpmMetricsGetPtr, sizeof(m_value.gpmMetricsGet));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPMMETRICSGET_PTR:
        {
            if (other.m_type == INJECTION_GPMMETRICSGET_PTR)
            {
                memcpy(m_value.gpmMetricsGetPtr, other.m_value.gpmMetricsGetPtr, sizeof(*m_value.gpmMetricsGetPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPMMETRICSGET)
            {
                memcpy(m_value.gpmMetricsGetPtr, &other.m_value.gpmMetricsGet, sizeof(*m_value.gpmMetricsGetPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPMSAMPLE:
        {
            if (other.m_type == INJECTION_GPMSAMPLE)
            {
                memcpy(&m_value.gpmSample, &other.m_value.gpmSample, sizeof(m_value.gpmSample));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPMSAMPLE_PTR)
            {
                memcpy(&m_value.gpmSample, other.m_value.gpmSamplePtr, sizeof(m_value.gpmSample));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPMSAMPLE_PTR:
        {
            if (other.m_type == INJECTION_GPMSAMPLE_PTR)
            {
                memcpy(m_value.gpmSamplePtr, other.m_value.gpmSamplePtr, sizeof(*m_value.gpmSamplePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPMSAMPLE)
            {
                memcpy(m_value.gpmSamplePtr, &other.m_value.gpmSample, sizeof(*m_value.gpmSamplePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPMSUPPORT:
        {
            if (other.m_type == INJECTION_GPMSUPPORT)
            {
                memcpy(&m_value.gpmSupport, &other.m_value.gpmSupport, sizeof(m_value.gpmSupport));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPMSUPPORT_PTR)
            {
                memcpy(&m_value.gpmSupport, other.m_value.gpmSupportPtr, sizeof(m_value.gpmSupport));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPMSUPPORT_PTR:
        {
            if (other.m_type == INJECTION_GPMSUPPORT_PTR)
            {
                memcpy(m_value.gpmSupportPtr, other.m_value.gpmSupportPtr, sizeof(*m_value.gpmSupportPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPMSUPPORT)
            {
                memcpy(m_value.gpmSupportPtr, &other.m_value.gpmSupport, sizeof(*m_value.gpmSupportPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUDYNAMICPSTATESINFO:
        {
            if (other.m_type == INJECTION_GPUDYNAMICPSTATESINFO)
            {
                memcpy(&m_value.gpuDynamicPstatesInfo, &other.m_value.gpuDynamicPstatesInfo, sizeof(m_value.gpuDynamicPstatesInfo));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUDYNAMICPSTATESINFO_PTR)
            {
                memcpy(&m_value.gpuDynamicPstatesInfo, other.m_value.gpuDynamicPstatesInfoPtr, sizeof(m_value.gpuDynamicPstatesInfo));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUDYNAMICPSTATESINFO_PTR:
        {
            if (other.m_type == INJECTION_GPUDYNAMICPSTATESINFO_PTR)
            {
                memcpy(m_value.gpuDynamicPstatesInfoPtr, other.m_value.gpuDynamicPstatesInfoPtr, sizeof(*m_value.gpuDynamicPstatesInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUDYNAMICPSTATESINFO)
            {
                memcpy(m_value.gpuDynamicPstatesInfoPtr, &other.m_value.gpuDynamicPstatesInfo, sizeof(*m_value.gpuDynamicPstatesInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUINSTANCEINFO:
        {
            if (other.m_type == INJECTION_GPUINSTANCEINFO)
            {
                memcpy(&m_value.gpuInstanceInfo, &other.m_value.gpuInstanceInfo, sizeof(m_value.gpuInstanceInfo));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUINSTANCEINFO_PTR)
            {
                memcpy(&m_value.gpuInstanceInfo, other.m_value.gpuInstanceInfoPtr, sizeof(m_value.gpuInstanceInfo));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUINSTANCEINFO_PTR:
        {
            if (other.m_type == INJECTION_GPUINSTANCEINFO_PTR)
            {
                memcpy(m_value.gpuInstanceInfoPtr, other.m_value.gpuInstanceInfoPtr, sizeof(*m_value.gpuInstanceInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUINSTANCEINFO)
            {
                memcpy(m_value.gpuInstanceInfoPtr, &other.m_value.gpuInstanceInfo, sizeof(*m_value.gpuInstanceInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUINSTANCEPLACEMENT:
        {
            if (other.m_type == INJECTION_GPUINSTANCEPLACEMENT)
            {
                memcpy(&m_value.gpuInstancePlacement, &other.m_value.gpuInstancePlacement, sizeof(m_value.gpuInstancePlacement));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUINSTANCEPLACEMENT_PTR)
            {
                memcpy(&m_value.gpuInstancePlacement, other.m_value.gpuInstancePlacementPtr, sizeof(m_value.gpuInstancePlacement));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUINSTANCEPLACEMENT_PTR:
        {
            if (other.m_type == INJECTION_GPUINSTANCEPLACEMENT_PTR)
            {
                memcpy(m_value.gpuInstancePlacementPtr, other.m_value.gpuInstancePlacementPtr, sizeof(*m_value.gpuInstancePlacementPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUINSTANCEPLACEMENT)
            {
                memcpy(m_value.gpuInstancePlacementPtr, &other.m_value.gpuInstancePlacement, sizeof(*m_value.gpuInstancePlacementPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUINSTANCEPROFILEINFO:
        {
            if (other.m_type == INJECTION_GPUINSTANCEPROFILEINFO)
            {
                memcpy(&m_value.gpuInstanceProfileInfo, &other.m_value.gpuInstanceProfileInfo, sizeof(m_value.gpuInstanceProfileInfo));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUINSTANCEPROFILEINFO_PTR)
            {
                memcpy(&m_value.gpuInstanceProfileInfo, other.m_value.gpuInstanceProfileInfoPtr, sizeof(m_value.gpuInstanceProfileInfo));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUINSTANCEPROFILEINFO_PTR:
        {
            if (other.m_type == INJECTION_GPUINSTANCEPROFILEINFO_PTR)
            {
                memcpy(m_value.gpuInstanceProfileInfoPtr, other.m_value.gpuInstanceProfileInfoPtr, sizeof(*m_value.gpuInstanceProfileInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUINSTANCEPROFILEINFO)
            {
                memcpy(m_value.gpuInstanceProfileInfoPtr, &other.m_value.gpuInstanceProfileInfo, sizeof(*m_value.gpuInstanceProfileInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUINSTANCEPROFILEINFO_V2:
        {
            if (other.m_type == INJECTION_GPUINSTANCEPROFILEINFO_V2)
            {
                memcpy(&m_value.gpuInstanceProfileInfo_v2, &other.m_value.gpuInstanceProfileInfo_v2, sizeof(m_value.gpuInstanceProfileInfo_v2));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUINSTANCEPROFILEINFO_V2_PTR)
            {
                memcpy(&m_value.gpuInstanceProfileInfo_v2, other.m_value.gpuInstanceProfileInfo_v2Ptr, sizeof(m_value.gpuInstanceProfileInfo_v2));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUINSTANCEPROFILEINFO_V2_PTR:
        {
            if (other.m_type == INJECTION_GPUINSTANCEPROFILEINFO_V2_PTR)
            {
                memcpy(m_value.gpuInstanceProfileInfo_v2Ptr, other.m_value.gpuInstanceProfileInfo_v2Ptr, sizeof(*m_value.gpuInstanceProfileInfo_v2Ptr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUINSTANCEPROFILEINFO_V2)
            {
                memcpy(m_value.gpuInstanceProfileInfo_v2Ptr, &other.m_value.gpuInstanceProfileInfo_v2, sizeof(*m_value.gpuInstanceProfileInfo_v2Ptr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUINSTANCE:
        {
            if (other.m_type == INJECTION_GPUINSTANCE)
            {
                memcpy(&m_value.gpuInstance, &other.m_value.gpuInstance, sizeof(m_value.gpuInstance));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUINSTANCE_PTR)
            {
                memcpy(&m_value.gpuInstance, other.m_value.gpuInstancePtr, sizeof(m_value.gpuInstance));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUINSTANCE_PTR:
        {
            if (other.m_type == INJECTION_GPUINSTANCE_PTR)
            {
                memcpy(m_value.gpuInstancePtr, other.m_value.gpuInstancePtr, sizeof(*m_value.gpuInstancePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUINSTANCE)
            {
                memcpy(m_value.gpuInstancePtr, &other.m_value.gpuInstance, sizeof(*m_value.gpuInstancePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUOPERATIONMODE:
        {
            if (other.m_type == INJECTION_GPUOPERATIONMODE)
            {
                memcpy(&m_value.gpuOperationMode, &other.m_value.gpuOperationMode, sizeof(m_value.gpuOperationMode));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUOPERATIONMODE_PTR)
            {
                memcpy(&m_value.gpuOperationMode, other.m_value.gpuOperationModePtr, sizeof(m_value.gpuOperationMode));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUOPERATIONMODE_PTR:
        {
            if (other.m_type == INJECTION_GPUOPERATIONMODE_PTR)
            {
                memcpy(m_value.gpuOperationModePtr, other.m_value.gpuOperationModePtr, sizeof(*m_value.gpuOperationModePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUOPERATIONMODE)
            {
                memcpy(m_value.gpuOperationModePtr, &other.m_value.gpuOperationMode, sizeof(*m_value.gpuOperationModePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUP2PCAPSINDEX:
        {
            if (other.m_type == INJECTION_GPUP2PCAPSINDEX)
            {
                memcpy(&m_value.gpuP2PCapsIndex, &other.m_value.gpuP2PCapsIndex, sizeof(m_value.gpuP2PCapsIndex));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUP2PSTATUS:
        {
            if (other.m_type == INJECTION_GPUP2PSTATUS)
            {
                memcpy(&m_value.gpuP2PStatus, &other.m_value.gpuP2PStatus, sizeof(m_value.gpuP2PStatus));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUP2PSTATUS_PTR)
            {
                memcpy(&m_value.gpuP2PStatus, other.m_value.gpuP2PStatusPtr, sizeof(m_value.gpuP2PStatus));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUP2PSTATUS_PTR:
        {
            if (other.m_type == INJECTION_GPUP2PSTATUS_PTR)
            {
                memcpy(m_value.gpuP2PStatusPtr, other.m_value.gpuP2PStatusPtr, sizeof(*m_value.gpuP2PStatusPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUP2PSTATUS)
            {
                memcpy(m_value.gpuP2PStatusPtr, &other.m_value.gpuP2PStatus, sizeof(*m_value.gpuP2PStatusPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUTHERMALSETTINGS:
        {
            if (other.m_type == INJECTION_GPUTHERMALSETTINGS)
            {
                memcpy(&m_value.gpuThermalSettings, &other.m_value.gpuThermalSettings, sizeof(m_value.gpuThermalSettings));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUTHERMALSETTINGS_PTR)
            {
                memcpy(&m_value.gpuThermalSettings, other.m_value.gpuThermalSettingsPtr, sizeof(m_value.gpuThermalSettings));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUTHERMALSETTINGS_PTR:
        {
            if (other.m_type == INJECTION_GPUTHERMALSETTINGS_PTR)
            {
                memcpy(m_value.gpuThermalSettingsPtr, other.m_value.gpuThermalSettingsPtr, sizeof(*m_value.gpuThermalSettingsPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUTHERMALSETTINGS)
            {
                memcpy(m_value.gpuThermalSettingsPtr, &other.m_value.gpuThermalSettings, sizeof(*m_value.gpuThermalSettingsPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUTOPOLOGYLEVEL:
        {
            if (other.m_type == INJECTION_GPUTOPOLOGYLEVEL)
            {
                memcpy(&m_value.gpuTopologyLevel, &other.m_value.gpuTopologyLevel, sizeof(m_value.gpuTopologyLevel));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUTOPOLOGYLEVEL_PTR)
            {
                memcpy(&m_value.gpuTopologyLevel, other.m_value.gpuTopologyLevelPtr, sizeof(m_value.gpuTopologyLevel));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUTOPOLOGYLEVEL_PTR:
        {
            if (other.m_type == INJECTION_GPUTOPOLOGYLEVEL_PTR)
            {
                memcpy(m_value.gpuTopologyLevelPtr, other.m_value.gpuTopologyLevelPtr, sizeof(*m_value.gpuTopologyLevelPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUTOPOLOGYLEVEL)
            {
                memcpy(m_value.gpuTopologyLevelPtr, &other.m_value.gpuTopologyLevel, sizeof(*m_value.gpuTopologyLevelPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUVIRTUALIZATIONMODE:
        {
            if (other.m_type == INJECTION_GPUVIRTUALIZATIONMODE)
            {
                memcpy(&m_value.gpuVirtualizationMode, &other.m_value.gpuVirtualizationMode, sizeof(m_value.gpuVirtualizationMode));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUVIRTUALIZATIONMODE_PTR)
            {
                memcpy(&m_value.gpuVirtualizationMode, other.m_value.gpuVirtualizationModePtr, sizeof(m_value.gpuVirtualizationMode));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GPUVIRTUALIZATIONMODE_PTR:
        {
            if (other.m_type == INJECTION_GPUVIRTUALIZATIONMODE_PTR)
            {
                memcpy(m_value.gpuVirtualizationModePtr, other.m_value.gpuVirtualizationModePtr, sizeof(*m_value.gpuVirtualizationModePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GPUVIRTUALIZATIONMODE)
            {
                memcpy(m_value.gpuVirtualizationModePtr, &other.m_value.gpuVirtualizationMode, sizeof(*m_value.gpuVirtualizationModePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GRIDLICENSABLEFEATURES:
        {
            if (other.m_type == INJECTION_GRIDLICENSABLEFEATURES)
            {
                memcpy(&m_value.gridLicensableFeatures, &other.m_value.gridLicensableFeatures, sizeof(m_value.gridLicensableFeatures));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GRIDLICENSABLEFEATURES_PTR)
            {
                memcpy(&m_value.gridLicensableFeatures, other.m_value.gridLicensableFeaturesPtr, sizeof(m_value.gridLicensableFeatures));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_GRIDLICENSABLEFEATURES_PTR:
        {
            if (other.m_type == INJECTION_GRIDLICENSABLEFEATURES_PTR)
            {
                memcpy(m_value.gridLicensableFeaturesPtr, other.m_value.gridLicensableFeaturesPtr, sizeof(*m_value.gridLicensableFeaturesPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_GRIDLICENSABLEFEATURES)
            {
                memcpy(m_value.gridLicensableFeaturesPtr, &other.m_value.gridLicensableFeatures, sizeof(*m_value.gridLicensableFeaturesPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_HOSTVGPUMODE:
        {
            if (other.m_type == INJECTION_HOSTVGPUMODE)
            {
                memcpy(&m_value.hostVgpuMode, &other.m_value.hostVgpuMode, sizeof(m_value.hostVgpuMode));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_HOSTVGPUMODE_PTR)
            {
                memcpy(&m_value.hostVgpuMode, other.m_value.hostVgpuModePtr, sizeof(m_value.hostVgpuMode));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_HOSTVGPUMODE_PTR:
        {
            if (other.m_type == INJECTION_HOSTVGPUMODE_PTR)
            {
                memcpy(m_value.hostVgpuModePtr, other.m_value.hostVgpuModePtr, sizeof(*m_value.hostVgpuModePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_HOSTVGPUMODE)
            {
                memcpy(m_value.hostVgpuModePtr, &other.m_value.hostVgpuMode, sizeof(*m_value.hostVgpuModePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_HWBCENTRY:
        {
            if (other.m_type == INJECTION_HWBCENTRY)
            {
                memcpy(&m_value.hwbcEntry, &other.m_value.hwbcEntry, sizeof(m_value.hwbcEntry));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_HWBCENTRY_PTR)
            {
                memcpy(&m_value.hwbcEntry, other.m_value.hwbcEntryPtr, sizeof(m_value.hwbcEntry));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_HWBCENTRY_PTR:
        {
            if (other.m_type == INJECTION_HWBCENTRY_PTR)
            {
                memcpy(m_value.hwbcEntryPtr, other.m_value.hwbcEntryPtr, sizeof(*m_value.hwbcEntryPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_HWBCENTRY)
            {
                memcpy(m_value.hwbcEntryPtr, &other.m_value.hwbcEntry, sizeof(*m_value.hwbcEntryPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_INFOROMOBJECT:
        {
            if (other.m_type == INJECTION_INFOROMOBJECT)
            {
                memcpy(&m_value.inforomObject, &other.m_value.inforomObject, sizeof(m_value.inforomObject));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_INTNVLINKDEVICETYPE:
        {
            if (other.m_type == INJECTION_INTNVLINKDEVICETYPE)
            {
                memcpy(&m_value.intNvLinkDeviceType, &other.m_value.intNvLinkDeviceType, sizeof(m_value.intNvLinkDeviceType));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_INTNVLINKDEVICETYPE_PTR)
            {
                memcpy(&m_value.intNvLinkDeviceType, other.m_value.intNvLinkDeviceTypePtr, sizeof(m_value.intNvLinkDeviceType));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_INTNVLINKDEVICETYPE_PTR:
        {
            if (other.m_type == INJECTION_INTNVLINKDEVICETYPE_PTR)
            {
                memcpy(m_value.intNvLinkDeviceTypePtr, other.m_value.intNvLinkDeviceTypePtr, sizeof(*m_value.intNvLinkDeviceTypePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_INTNVLINKDEVICETYPE)
            {
                memcpy(m_value.intNvLinkDeviceTypePtr, &other.m_value.intNvLinkDeviceType, sizeof(*m_value.intNvLinkDeviceTypePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_LEDCOLOR:
        {
            if (other.m_type == INJECTION_LEDCOLOR)
            {
                memcpy(&m_value.ledColor, &other.m_value.ledColor, sizeof(m_value.ledColor));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_LEDSTATE:
        {
            if (other.m_type == INJECTION_LEDSTATE)
            {
                memcpy(&m_value.ledState, &other.m_value.ledState, sizeof(m_value.ledState));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_LEDSTATE_PTR)
            {
                memcpy(&m_value.ledState, other.m_value.ledStatePtr, sizeof(m_value.ledState));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_LEDSTATE_PTR:
        {
            if (other.m_type == INJECTION_LEDSTATE_PTR)
            {
                memcpy(m_value.ledStatePtr, other.m_value.ledStatePtr, sizeof(*m_value.ledStatePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_LEDSTATE)
            {
                memcpy(m_value.ledStatePtr, &other.m_value.ledState, sizeof(*m_value.ledStatePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_MEMORYERRORTYPE:
        {
            if (other.m_type == INJECTION_MEMORYERRORTYPE)
            {
                memcpy(&m_value.memoryErrorType, &other.m_value.memoryErrorType, sizeof(m_value.memoryErrorType));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_MEMORYLOCATION:
        {
            if (other.m_type == INJECTION_MEMORYLOCATION)
            {
                memcpy(&m_value.memoryLocation, &other.m_value.memoryLocation, sizeof(m_value.memoryLocation));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_MEMORY:
        {
            if (other.m_type == INJECTION_MEMORY)
            {
                memcpy(&m_value.memory, &other.m_value.memory, sizeof(m_value.memory));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_MEMORY_PTR)
            {
                memcpy(&m_value.memory, other.m_value.memoryPtr, sizeof(m_value.memory));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_MEMORY_PTR:
        {
            if (other.m_type == INJECTION_MEMORY_PTR)
            {
                memcpy(m_value.memoryPtr, other.m_value.memoryPtr, sizeof(*m_value.memoryPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_MEMORY)
            {
                memcpy(m_value.memoryPtr, &other.m_value.memory, sizeof(*m_value.memoryPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_MEMORY_V2:
        {
            if (other.m_type == INJECTION_MEMORY_V2)
            {
                memcpy(&m_value.memory_v2, &other.m_value.memory_v2, sizeof(m_value.memory_v2));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_MEMORY_V2_PTR)
            {
                memcpy(&m_value.memory_v2, other.m_value.memory_v2Ptr, sizeof(m_value.memory_v2));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_MEMORY_V2_PTR:
        {
            if (other.m_type == INJECTION_MEMORY_V2_PTR)
            {
                memcpy(m_value.memory_v2Ptr, other.m_value.memory_v2Ptr, sizeof(*m_value.memory_v2Ptr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_MEMORY_V2)
            {
                memcpy(m_value.memory_v2Ptr, &other.m_value.memory_v2, sizeof(*m_value.memory_v2Ptr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_NVLINKCAPABILITY:
        {
            if (other.m_type == INJECTION_NVLINKCAPABILITY)
            {
                memcpy(&m_value.nvLinkCapability, &other.m_value.nvLinkCapability, sizeof(m_value.nvLinkCapability));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_NVLINKERRORCOUNTER:
        {
            if (other.m_type == INJECTION_NVLINKERRORCOUNTER)
            {
                memcpy(&m_value.nvLinkErrorCounter, &other.m_value.nvLinkErrorCounter, sizeof(m_value.nvLinkErrorCounter));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_NVLINKUTILIZATIONCONTROL:
        {
            if (other.m_type == INJECTION_NVLINKUTILIZATIONCONTROL)
            {
                memcpy(&m_value.nvLinkUtilizationControl, &other.m_value.nvLinkUtilizationControl, sizeof(m_value.nvLinkUtilizationControl));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_NVLINKUTILIZATIONCONTROL_PTR)
            {
                memcpy(&m_value.nvLinkUtilizationControl, other.m_value.nvLinkUtilizationControlPtr, sizeof(m_value.nvLinkUtilizationControl));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_NVLINKUTILIZATIONCONTROL_PTR:
        {
            if (other.m_type == INJECTION_NVLINKUTILIZATIONCONTROL_PTR)
            {
                memcpy(m_value.nvLinkUtilizationControlPtr, other.m_value.nvLinkUtilizationControlPtr, sizeof(*m_value.nvLinkUtilizationControlPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_NVLINKUTILIZATIONCONTROL)
            {
                memcpy(m_value.nvLinkUtilizationControlPtr, &other.m_value.nvLinkUtilizationControl, sizeof(*m_value.nvLinkUtilizationControlPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_PSUINFO:
        {
            if (other.m_type == INJECTION_PSUINFO)
            {
                memcpy(&m_value.pSUInfo, &other.m_value.pSUInfo, sizeof(m_value.pSUInfo));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_PSUINFO_PTR)
            {
                memcpy(&m_value.pSUInfo, other.m_value.pSUInfoPtr, sizeof(m_value.pSUInfo));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_PSUINFO_PTR:
        {
            if (other.m_type == INJECTION_PSUINFO_PTR)
            {
                memcpy(m_value.pSUInfoPtr, other.m_value.pSUInfoPtr, sizeof(*m_value.pSUInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_PSUINFO)
            {
                memcpy(m_value.pSUInfoPtr, &other.m_value.pSUInfo, sizeof(*m_value.pSUInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_PAGERETIREMENTCAUSE:
        {
            if (other.m_type == INJECTION_PAGERETIREMENTCAUSE)
            {
                memcpy(&m_value.pageRetirementCause, &other.m_value.pageRetirementCause, sizeof(m_value.pageRetirementCause));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_PCIINFO:
        {
            if (other.m_type == INJECTION_PCIINFO)
            {
                memcpy(&m_value.pciInfo, &other.m_value.pciInfo, sizeof(m_value.pciInfo));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_PCIINFO_PTR)
            {
                memcpy(&m_value.pciInfo, other.m_value.pciInfoPtr, sizeof(m_value.pciInfo));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_PCIINFO_PTR:
        {
            if (other.m_type == INJECTION_PCIINFO_PTR)
            {
                memcpy(m_value.pciInfoPtr, other.m_value.pciInfoPtr, sizeof(*m_value.pciInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_PCIINFO)
            {
                memcpy(m_value.pciInfoPtr, &other.m_value.pciInfo, sizeof(*m_value.pciInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_PCIELINKSTATE:
        {
            if (other.m_type == INJECTION_PCIELINKSTATE)
            {
                memcpy(&m_value.pcieLinkState, &other.m_value.pcieLinkState, sizeof(m_value.pcieLinkState));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_PCIEUTILCOUNTER:
        {
            if (other.m_type == INJECTION_PCIEUTILCOUNTER)
            {
                memcpy(&m_value.pcieUtilCounter, &other.m_value.pcieUtilCounter, sizeof(m_value.pcieUtilCounter));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_PERFPOLICYTYPE:
        {
            if (other.m_type == INJECTION_PERFPOLICYTYPE)
            {
                memcpy(&m_value.perfPolicyType, &other.m_value.perfPolicyType, sizeof(m_value.perfPolicyType));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_PROCESSINFO:
        {
            if (other.m_type == INJECTION_PROCESSINFO)
            {
                memcpy(&m_value.processInfo, &other.m_value.processInfo, sizeof(m_value.processInfo));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_PROCESSINFO_PTR)
            {
                memcpy(&m_value.processInfo, other.m_value.processInfoPtr, sizeof(m_value.processInfo));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_PROCESSINFO_PTR:
        {
            if (other.m_type == INJECTION_PROCESSINFO_PTR)
            {
                memcpy(m_value.processInfoPtr, other.m_value.processInfoPtr, sizeof(*m_value.processInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_PROCESSINFO)
            {
                memcpy(m_value.processInfoPtr, &other.m_value.processInfo, sizeof(*m_value.processInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_PROCESSINFO_V1:
        {
            if (other.m_type == INJECTION_PROCESSINFO_V1)
            {
                memcpy(&m_value.processInfo_v1, &other.m_value.processInfo_v1, sizeof(m_value.processInfo_v1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_PROCESSINFO_V1_PTR)
            {
                memcpy(&m_value.processInfo_v1, other.m_value.processInfo_v1Ptr, sizeof(m_value.processInfo_v1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_PROCESSINFO_V1_PTR:
        {
            if (other.m_type == INJECTION_PROCESSINFO_V1_PTR)
            {
                memcpy(m_value.processInfo_v1Ptr, other.m_value.processInfo_v1Ptr, sizeof(*m_value.processInfo_v1Ptr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_PROCESSINFO_V1)
            {
                memcpy(m_value.processInfo_v1Ptr, &other.m_value.processInfo_v1, sizeof(*m_value.processInfo_v1Ptr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_PROCESSINFO_V2:
        {
            if (other.m_type == INJECTION_PROCESSINFO_V2)
            {
                memcpy(&m_value.processInfo_v2, &other.m_value.processInfo_v2, sizeof(m_value.processInfo_v2));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_PROCESSINFO_V2_PTR)
            {
                memcpy(&m_value.processInfo_v2, other.m_value.processInfo_v2Ptr, sizeof(m_value.processInfo_v2));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_PROCESSINFO_V2_PTR:
        {
            if (other.m_type == INJECTION_PROCESSINFO_V2_PTR)
            {
                memcpy(m_value.processInfo_v2Ptr, other.m_value.processInfo_v2Ptr, sizeof(*m_value.processInfo_v2Ptr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_PROCESSINFO_V2)
            {
                memcpy(m_value.processInfo_v2Ptr, &other.m_value.processInfo_v2, sizeof(*m_value.processInfo_v2Ptr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_PROCESSUTILIZATIONSAMPLE:
        {
            if (other.m_type == INJECTION_PROCESSUTILIZATIONSAMPLE)
            {
                memcpy(&m_value.processUtilizationSample, &other.m_value.processUtilizationSample, sizeof(m_value.processUtilizationSample));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_PROCESSUTILIZATIONSAMPLE_PTR)
            {
                memcpy(&m_value.processUtilizationSample, other.m_value.processUtilizationSamplePtr, sizeof(m_value.processUtilizationSample));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_PROCESSUTILIZATIONSAMPLE_PTR:
        {
            if (other.m_type == INJECTION_PROCESSUTILIZATIONSAMPLE_PTR)
            {
                memcpy(m_value.processUtilizationSamplePtr, other.m_value.processUtilizationSamplePtr, sizeof(*m_value.processUtilizationSamplePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_PROCESSUTILIZATIONSAMPLE)
            {
                memcpy(m_value.processUtilizationSamplePtr, &other.m_value.processUtilizationSample, sizeof(*m_value.processUtilizationSamplePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_PSTATES:
        {
            if (other.m_type == INJECTION_PSTATES)
            {
                memcpy(&m_value.pstates, &other.m_value.pstates, sizeof(m_value.pstates));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_PSTATES_PTR)
            {
                memcpy(&m_value.pstates, other.m_value.pstatesPtr, sizeof(m_value.pstates));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_PSTATES_PTR:
        {
            if (other.m_type == INJECTION_PSTATES_PTR)
            {
                memcpy(m_value.pstatesPtr, other.m_value.pstatesPtr, sizeof(*m_value.pstatesPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_PSTATES)
            {
                memcpy(m_value.pstatesPtr, &other.m_value.pstates, sizeof(*m_value.pstatesPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_RESTRICTEDAPI:
        {
            if (other.m_type == INJECTION_RESTRICTEDAPI)
            {
                memcpy(&m_value.restrictedAPI, &other.m_value.restrictedAPI, sizeof(m_value.restrictedAPI));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_RETURN:
        {
            if (other.m_type == INJECTION_RETURN)
            {
                memcpy(&m_value.nvmlReturn, &other.m_value.nvmlReturn, sizeof(m_value.nvmlReturn));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_RETURN_PTR)
            {
                memcpy(&m_value.nvmlReturn, other.m_value.nvmlReturnPtr, sizeof(m_value.nvmlReturn));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_RETURN_PTR:
        {
            if (other.m_type == INJECTION_RETURN_PTR)
            {
                memcpy(m_value.nvmlReturnPtr, other.m_value.nvmlReturnPtr, sizeof(*m_value.nvmlReturnPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_RETURN)
            {
                memcpy(m_value.nvmlReturnPtr, &other.m_value.nvmlReturn, sizeof(*m_value.nvmlReturnPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_ROWREMAPPERHISTOGRAMVALUES:
        {
            if (other.m_type == INJECTION_ROWREMAPPERHISTOGRAMVALUES)
            {
                memcpy(&m_value.rowRemapperHistogramValues, &other.m_value.rowRemapperHistogramValues, sizeof(m_value.rowRemapperHistogramValues));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_ROWREMAPPERHISTOGRAMVALUES_PTR)
            {
                memcpy(&m_value.rowRemapperHistogramValues, other.m_value.rowRemapperHistogramValuesPtr, sizeof(m_value.rowRemapperHistogramValues));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_ROWREMAPPERHISTOGRAMVALUES_PTR:
        {
            if (other.m_type == INJECTION_ROWREMAPPERHISTOGRAMVALUES_PTR)
            {
                memcpy(m_value.rowRemapperHistogramValuesPtr, other.m_value.rowRemapperHistogramValuesPtr, sizeof(*m_value.rowRemapperHistogramValuesPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_ROWREMAPPERHISTOGRAMVALUES)
            {
                memcpy(m_value.rowRemapperHistogramValuesPtr, &other.m_value.rowRemapperHistogramValues, sizeof(*m_value.rowRemapperHistogramValuesPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_SAMPLE:
        {
            if (other.m_type == INJECTION_SAMPLE)
            {
                memcpy(&m_value.sample, &other.m_value.sample, sizeof(m_value.sample));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_SAMPLE_PTR)
            {
                memcpy(&m_value.sample, other.m_value.samplePtr, sizeof(m_value.sample));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_SAMPLE_PTR:
        {
            if (other.m_type == INJECTION_SAMPLE_PTR)
            {
                memcpy(m_value.samplePtr, other.m_value.samplePtr, sizeof(*m_value.samplePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_SAMPLE)
            {
                memcpy(m_value.samplePtr, &other.m_value.sample, sizeof(*m_value.samplePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_SAMPLINGTYPE:
        {
            if (other.m_type == INJECTION_SAMPLINGTYPE)
            {
                memcpy(&m_value.samplingType, &other.m_value.samplingType, sizeof(m_value.samplingType));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_TEMPERATURESENSORS:
        {
            if (other.m_type == INJECTION_TEMPERATURESENSORS)
            {
                memcpy(&m_value.temperatureSensors, &other.m_value.temperatureSensors, sizeof(m_value.temperatureSensors));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_TEMPERATURETHRESHOLDS:
        {
            if (other.m_type == INJECTION_TEMPERATURETHRESHOLDS)
            {
                memcpy(&m_value.temperatureThresholds, &other.m_value.temperatureThresholds, sizeof(m_value.temperatureThresholds));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_UNITFANSPEEDS:
        {
            if (other.m_type == INJECTION_UNITFANSPEEDS)
            {
                memcpy(&m_value.unitFanSpeeds, &other.m_value.unitFanSpeeds, sizeof(m_value.unitFanSpeeds));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_UNITFANSPEEDS_PTR)
            {
                memcpy(&m_value.unitFanSpeeds, other.m_value.unitFanSpeedsPtr, sizeof(m_value.unitFanSpeeds));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_UNITFANSPEEDS_PTR:
        {
            if (other.m_type == INJECTION_UNITFANSPEEDS_PTR)
            {
                memcpy(m_value.unitFanSpeedsPtr, other.m_value.unitFanSpeedsPtr, sizeof(*m_value.unitFanSpeedsPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_UNITFANSPEEDS)
            {
                memcpy(m_value.unitFanSpeedsPtr, &other.m_value.unitFanSpeeds, sizeof(*m_value.unitFanSpeedsPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_UNITINFO:
        {
            if (other.m_type == INJECTION_UNITINFO)
            {
                memcpy(&m_value.unitInfo, &other.m_value.unitInfo, sizeof(m_value.unitInfo));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_UNITINFO_PTR)
            {
                memcpy(&m_value.unitInfo, other.m_value.unitInfoPtr, sizeof(m_value.unitInfo));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_UNITINFO_PTR:
        {
            if (other.m_type == INJECTION_UNITINFO_PTR)
            {
                memcpy(m_value.unitInfoPtr, other.m_value.unitInfoPtr, sizeof(*m_value.unitInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_UNITINFO)
            {
                memcpy(m_value.unitInfoPtr, &other.m_value.unitInfo, sizeof(*m_value.unitInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_UNIT:
        {
            if (other.m_type == INJECTION_UNIT)
            {
                memcpy(&m_value.unit, &other.m_value.unit, sizeof(m_value.unit));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_UNIT_PTR)
            {
                memcpy(&m_value.unit, other.m_value.unitPtr, sizeof(m_value.unit));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_UNIT_PTR:
        {
            if (other.m_type == INJECTION_UNIT_PTR)
            {
                memcpy(m_value.unitPtr, other.m_value.unitPtr, sizeof(*m_value.unitPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_UNIT)
            {
                memcpy(m_value.unitPtr, &other.m_value.unit, sizeof(*m_value.unitPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_UTILIZATION:
        {
            if (other.m_type == INJECTION_UTILIZATION)
            {
                memcpy(&m_value.utilization, &other.m_value.utilization, sizeof(m_value.utilization));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_UTILIZATION_PTR)
            {
                memcpy(&m_value.utilization, other.m_value.utilizationPtr, sizeof(m_value.utilization));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_UTILIZATION_PTR:
        {
            if (other.m_type == INJECTION_UTILIZATION_PTR)
            {
                memcpy(m_value.utilizationPtr, other.m_value.utilizationPtr, sizeof(*m_value.utilizationPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_UTILIZATION)
            {
                memcpy(m_value.utilizationPtr, &other.m_value.utilization, sizeof(*m_value.utilizationPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VALUETYPE:
        {
            if (other.m_type == INJECTION_VALUETYPE)
            {
                memcpy(&m_value.valueType, &other.m_value.valueType, sizeof(m_value.valueType));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_VALUETYPE_PTR)
            {
                memcpy(&m_value.valueType, other.m_value.valueTypePtr, sizeof(m_value.valueType));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VALUETYPE_PTR:
        {
            if (other.m_type == INJECTION_VALUETYPE_PTR)
            {
                memcpy(m_value.valueTypePtr, other.m_value.valueTypePtr, sizeof(*m_value.valueTypePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_VALUETYPE)
            {
                memcpy(m_value.valueTypePtr, &other.m_value.valueType, sizeof(*m_value.valueTypePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VGPUCAPABILITY:
        {
            if (other.m_type == INJECTION_VGPUCAPABILITY)
            {
                memcpy(&m_value.vgpuCapability, &other.m_value.vgpuCapability, sizeof(m_value.vgpuCapability));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VGPUINSTANCEUTILIZATIONSAMPLE:
        {
            if (other.m_type == INJECTION_VGPUINSTANCEUTILIZATIONSAMPLE)
            {
                memcpy(&m_value.vgpuInstanceUtilizationSample, &other.m_value.vgpuInstanceUtilizationSample, sizeof(m_value.vgpuInstanceUtilizationSample));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_VGPUINSTANCEUTILIZATIONSAMPLE_PTR)
            {
                memcpy(&m_value.vgpuInstanceUtilizationSample, other.m_value.vgpuInstanceUtilizationSamplePtr, sizeof(m_value.vgpuInstanceUtilizationSample));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VGPUINSTANCEUTILIZATIONSAMPLE_PTR:
        {
            if (other.m_type == INJECTION_VGPUINSTANCEUTILIZATIONSAMPLE_PTR)
            {
                memcpy(m_value.vgpuInstanceUtilizationSamplePtr, other.m_value.vgpuInstanceUtilizationSamplePtr, sizeof(*m_value.vgpuInstanceUtilizationSamplePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_VGPUINSTANCEUTILIZATIONSAMPLE)
            {
                memcpy(m_value.vgpuInstanceUtilizationSamplePtr, &other.m_value.vgpuInstanceUtilizationSample, sizeof(*m_value.vgpuInstanceUtilizationSamplePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VGPULICENSEINFO:
        {
            if (other.m_type == INJECTION_VGPULICENSEINFO)
            {
                memcpy(&m_value.vgpuLicenseInfo, &other.m_value.vgpuLicenseInfo, sizeof(m_value.vgpuLicenseInfo));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_VGPULICENSEINFO_PTR)
            {
                memcpy(&m_value.vgpuLicenseInfo, other.m_value.vgpuLicenseInfoPtr, sizeof(m_value.vgpuLicenseInfo));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VGPULICENSEINFO_PTR:
        {
            if (other.m_type == INJECTION_VGPULICENSEINFO_PTR)
            {
                memcpy(m_value.vgpuLicenseInfoPtr, other.m_value.vgpuLicenseInfoPtr, sizeof(*m_value.vgpuLicenseInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_VGPULICENSEINFO)
            {
                memcpy(m_value.vgpuLicenseInfoPtr, &other.m_value.vgpuLicenseInfo, sizeof(*m_value.vgpuLicenseInfoPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VGPUMETADATA:
        {
            if (other.m_type == INJECTION_VGPUMETADATA)
            {
                memcpy(&m_value.vgpuMetadata, &other.m_value.vgpuMetadata, sizeof(m_value.vgpuMetadata));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_VGPUMETADATA_PTR)
            {
                memcpy(&m_value.vgpuMetadata, other.m_value.vgpuMetadataPtr, sizeof(m_value.vgpuMetadata));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VGPUMETADATA_PTR:
        {
            if (other.m_type == INJECTION_VGPUMETADATA_PTR)
            {
                memcpy(m_value.vgpuMetadataPtr, other.m_value.vgpuMetadataPtr, sizeof(*m_value.vgpuMetadataPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_VGPUMETADATA)
            {
                memcpy(m_value.vgpuMetadataPtr, &other.m_value.vgpuMetadata, sizeof(*m_value.vgpuMetadataPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VGPUPGPUCOMPATIBILITY:
        {
            if (other.m_type == INJECTION_VGPUPGPUCOMPATIBILITY)
            {
                memcpy(&m_value.vgpuPgpuCompatibility, &other.m_value.vgpuPgpuCompatibility, sizeof(m_value.vgpuPgpuCompatibility));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_VGPUPGPUCOMPATIBILITY_PTR)
            {
                memcpy(&m_value.vgpuPgpuCompatibility, other.m_value.vgpuPgpuCompatibilityPtr, sizeof(m_value.vgpuPgpuCompatibility));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VGPUPGPUCOMPATIBILITY_PTR:
        {
            if (other.m_type == INJECTION_VGPUPGPUCOMPATIBILITY_PTR)
            {
                memcpy(m_value.vgpuPgpuCompatibilityPtr, other.m_value.vgpuPgpuCompatibilityPtr, sizeof(*m_value.vgpuPgpuCompatibilityPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_VGPUPGPUCOMPATIBILITY)
            {
                memcpy(m_value.vgpuPgpuCompatibilityPtr, &other.m_value.vgpuPgpuCompatibility, sizeof(*m_value.vgpuPgpuCompatibilityPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VGPUPGPUMETADATA:
        {
            if (other.m_type == INJECTION_VGPUPGPUMETADATA)
            {
                memcpy(&m_value.vgpuPgpuMetadata, &other.m_value.vgpuPgpuMetadata, sizeof(m_value.vgpuPgpuMetadata));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_VGPUPGPUMETADATA_PTR)
            {
                memcpy(&m_value.vgpuPgpuMetadata, other.m_value.vgpuPgpuMetadataPtr, sizeof(m_value.vgpuPgpuMetadata));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VGPUPGPUMETADATA_PTR:
        {
            if (other.m_type == INJECTION_VGPUPGPUMETADATA_PTR)
            {
                memcpy(m_value.vgpuPgpuMetadataPtr, other.m_value.vgpuPgpuMetadataPtr, sizeof(*m_value.vgpuPgpuMetadataPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_VGPUPGPUMETADATA)
            {
                memcpy(m_value.vgpuPgpuMetadataPtr, &other.m_value.vgpuPgpuMetadata, sizeof(*m_value.vgpuPgpuMetadataPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VGPUPROCESSUTILIZATIONSAMPLE:
        {
            if (other.m_type == INJECTION_VGPUPROCESSUTILIZATIONSAMPLE)
            {
                memcpy(&m_value.vgpuProcessUtilizationSample, &other.m_value.vgpuProcessUtilizationSample, sizeof(m_value.vgpuProcessUtilizationSample));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_VGPUPROCESSUTILIZATIONSAMPLE_PTR)
            {
                memcpy(&m_value.vgpuProcessUtilizationSample, other.m_value.vgpuProcessUtilizationSamplePtr, sizeof(m_value.vgpuProcessUtilizationSample));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VGPUPROCESSUTILIZATIONSAMPLE_PTR:
        {
            if (other.m_type == INJECTION_VGPUPROCESSUTILIZATIONSAMPLE_PTR)
            {
                memcpy(m_value.vgpuProcessUtilizationSamplePtr, other.m_value.vgpuProcessUtilizationSamplePtr, sizeof(*m_value.vgpuProcessUtilizationSamplePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_VGPUPROCESSUTILIZATIONSAMPLE)
            {
                memcpy(m_value.vgpuProcessUtilizationSamplePtr, &other.m_value.vgpuProcessUtilizationSample, sizeof(*m_value.vgpuProcessUtilizationSamplePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VGPUVERSION:
        {
            if (other.m_type == INJECTION_VGPUVERSION)
            {
                memcpy(&m_value.vgpuVersion, &other.m_value.vgpuVersion, sizeof(m_value.vgpuVersion));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_VGPUVERSION_PTR)
            {
                memcpy(&m_value.vgpuVersion, other.m_value.vgpuVersionPtr, sizeof(m_value.vgpuVersion));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VGPUVERSION_PTR:
        {
            if (other.m_type == INJECTION_VGPUVERSION_PTR)
            {
                memcpy(m_value.vgpuVersionPtr, other.m_value.vgpuVersionPtr, sizeof(*m_value.vgpuVersionPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_VGPUVERSION)
            {
                memcpy(m_value.vgpuVersionPtr, &other.m_value.vgpuVersion, sizeof(*m_value.vgpuVersionPtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VGPUVMIDTYPE:
        {
            if (other.m_type == INJECTION_VGPUVMIDTYPE)
            {
                memcpy(&m_value.vgpuVmIdType, &other.m_value.vgpuVmIdType, sizeof(m_value.vgpuVmIdType));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_VGPUVMIDTYPE_PTR)
            {
                memcpy(&m_value.vgpuVmIdType, other.m_value.vgpuVmIdTypePtr, sizeof(m_value.vgpuVmIdType));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VGPUVMIDTYPE_PTR:
        {
            if (other.m_type == INJECTION_VGPUVMIDTYPE_PTR)
            {
                memcpy(m_value.vgpuVmIdTypePtr, other.m_value.vgpuVmIdTypePtr, sizeof(*m_value.vgpuVmIdTypePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_VGPUVMIDTYPE)
            {
                memcpy(m_value.vgpuVmIdTypePtr, &other.m_value.vgpuVmIdType, sizeof(*m_value.vgpuVmIdTypePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VIOLATIONTIME:
        {
            if (other.m_type == INJECTION_VIOLATIONTIME)
            {
                memcpy(&m_value.violationTime, &other.m_value.violationTime, sizeof(m_value.violationTime));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_VIOLATIONTIME_PTR)
            {
                memcpy(&m_value.violationTime, other.m_value.violationTimePtr, sizeof(m_value.violationTime));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_VIOLATIONTIME_PTR:
        {
            if (other.m_type == INJECTION_VIOLATIONTIME_PTR)
            {
                memcpy(m_value.violationTimePtr, other.m_value.violationTimePtr, sizeof(*m_value.violationTimePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_VIOLATIONTIME)
            {
                memcpy(m_value.violationTimePtr, &other.m_value.violationTime, sizeof(*m_value.violationTimePtr) * (m_isArray ? m_arrLen : 1));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_UINT:
        {
            if (other.m_type == INJECTION_UINT)
            {
                // The following snippet is generated from print_equals_and_set
                std::memcpy(&this->m_value.ui, &other.m_value.ui, sizeof(*&this->m_value.ui));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_UINT_PTR)
            {
                // The following snippet is generated from print_equals_and_set
                std::memcpy(&this->m_value.ui, other.m_value.uiPtr, sizeof(*&this->m_value.ui));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_INT && other.m_value.i > 0)
            {
                this->m_value.ui = other.m_value.i;
                set = true;
            }
            else if (other.m_type == INJECTION_INT_PTR && *other.m_value.iPtr > 0)
            {
                this->m_value.ui = *other.m_value.iPtr;
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_UINT_PTR:
        {
            if (other.m_type == INJECTION_UINT_PTR)
            {
                // The following snippet is generated from print_equals_and_set
                std::memcpy(this->m_value.uiPtr, other.m_value.uiPtr, sizeof(*this->m_value.uiPtr) * (other.m_isArray ? other.m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_UINT)
            {
                // The following snippet is generated from print_equals_and_set
                std::memcpy(this->m_value.uiPtr, &other.m_value.ui, sizeof(*this->m_value.uiPtr));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_INT && other.m_value.i > 0)
            {
                *this->m_value.uiPtr = other.m_value.i;
                set = true;
            }
            else if (other.m_type == INJECTION_INT_PTR && *other.m_value.iPtr > 0)
            {
                *this->m_value.uiPtr = *other.m_value.iPtr;
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_ULONG:
        {
            if (other.m_type == INJECTION_ULONG)
            {
                // The following snippet is generated from print_equals_and_set
                std::memcpy(&this->m_value.ul, &other.m_value.ul, sizeof(*&this->m_value.ul));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_ULONG_PTR)
            {
                // The following snippet is generated from print_equals_and_set
                std::memcpy(&this->m_value.ul, other.m_value.ulPtr, sizeof(*&this->m_value.ul));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_ULONG_PTR:
        {
            if (other.m_type == INJECTION_ULONG_PTR)
            {
                // The following snippet is generated from print_equals_and_set
                std::memcpy(this->m_value.ulPtr, other.m_value.ulPtr, sizeof(*this->m_value.ulPtr) * (other.m_isArray ? other.m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_ULONG)
            {
                // The following snippet is generated from print_equals_and_set
                std::memcpy(this->m_value.ulPtr, &other.m_value.ul, sizeof(*this->m_value.ulPtr));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_ULONG_LONG:
        {
            if (other.m_type == INJECTION_ULONG_LONG)
            {
                // The following snippet is generated from print_equals_and_set
                std::memcpy(&this->m_value.ull, &other.m_value.ull, sizeof(*&this->m_value.ull));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_ULONG_LONG_PTR)
            {
                // The following snippet is generated from print_equals_and_set
                std::memcpy(&this->m_value.ull, other.m_value.ullPtr, sizeof(*&this->m_value.ull));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_case_entry
        case INJECTION_ULONG_LONG_PTR:
        {
            if (other.m_type == INJECTION_ULONG_LONG_PTR)
            {
                // The following snippet is generated from print_equals_and_set
                std::memcpy(this->m_value.ullPtr, other.m_value.ullPtr, sizeof(*this->m_value.ullPtr) * (other.m_isArray ? other.m_arrLen : 1));
                set = true;
            }
            // The following snippet is generated from write_case_entry
            else if (other.m_type == INJECTION_ULONG_LONG)
            {
                // The following snippet is generated from print_equals_and_set
                std::memcpy(this->m_value.ullPtr, &other.m_value.ull, sizeof(*this->m_value.ullPtr));
                set = true;
            }
            break;
        }
        // The following snippet is generated from write_string_case_entry
        case INJECTION_STRING:
        {
            if (other.m_type == INJECTION_STRING)
            {
                this->m_str = other.m_str;
                set         = true;
            }
            else if (other.m_type == INJECTION_CHAR_PTR && other.m_value.str != nullptr)
            {
                this->m_str = other.m_value.str;
                set         = true;
            }
            else if (other.m_type == INJECTION_CONST_CHAR_PTR && other.m_value.const_str != nullptr)
            {
                this->m_str = other.m_value.const_str;
                set         = true;
            }
            break;
        }
        default:
            break;
    }
    if (set)
    {
        return NVML_SUCCESS;
    }
    else
    {
        return NVML_ERROR_INVALID_ARGUMENT;
    }
}

// The following snippet is generated from write_injection_argument_compare
int InjectionArgument::Compare(const InjectionArgument &other) const
{
    if (m_type < other.m_type)
    {
        return -1;
    }
    else if (m_type > other.m_type)
    {
        return 1;
    }
    else
    {
        if (m_type == INJECTION_STRING)
        {
            if (m_str < other.m_str)
            {
                return -1;
            }
            else if (m_str > other.m_str)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        else
        {
            switch (m_type)
            {
                case INJECTION_CHAR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.c < other.m_value.c)
                    {
                        return -1;
                    }
                    else if (m_value.c > other.m_value.c)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_CHAR_PTR:
                {
                    return strcmp(m_value.str, other.m_value.str);
                    break; // NOT REACHED
                }
                case INJECTION_CONST_CHAR_PTR:
                {
                    return strcmp(m_value.const_str, other.m_value.const_str);
                    break; // NOT REACHED
                }
                case INJECTION_CONST_NVMLGPUINSTANCEPLACEMENT_T_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlGpuInstancePlacement_tCompare(*m_value.cnPtr, *other.m_value.cnPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlGpuInstancePlacement_tCompare(*m_value.cnPtr, *other.m_value.cnPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_INT:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.i < other.m_value.i)
                    {
                        return -1;
                    }
                    else if (m_value.i > other.m_value.i)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_INT_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        if (*m_value.iPtr == *other.m_value.iPtr)
                        {
                            return 0;
                        }
                        return *m_value.iPtr < *other.m_value.iPtr ? -1 : 1;
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (m_value.iPtr[i] == other.m_value.iPtr[i])
                        {
                            continue;
                        }
                        return m_value.iPtr[i] < other.m_value.iPtr[i] ? -1 : 1;
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_ACCOUNTINGSTATS:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlAccountingStats_tCompare(m_value.accountingStats, other.m_value.accountingStats);
                    break; // NOT REACHED
                }
                case INJECTION_ACCOUNTINGSTATS_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlAccountingStats_tCompare(*m_value.accountingStatsPtr, *other.m_value.accountingStatsPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlAccountingStats_tCompare(*m_value.accountingStatsPtr, *other.m_value.accountingStatsPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_BAR1MEMORY:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlBAR1Memory_tCompare(m_value.bar1Memory, other.m_value.bar1Memory);
                    break; // NOT REACHED
                }
                case INJECTION_BAR1MEMORY_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlBAR1Memory_tCompare(*m_value.bar1MemoryPtr, *other.m_value.bar1MemoryPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlBAR1Memory_tCompare(*m_value.bar1MemoryPtr, *other.m_value.bar1MemoryPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_BRANDTYPE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.brandType < other.m_value.brandType)
                    {
                        return -1;
                    }
                    else if (m_value.brandType > other.m_value.brandType)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_BRANDTYPE_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        if (*m_value.brandTypePtr == *other.m_value.brandTypePtr)
                        {
                            return 0;
                        }
                        return *m_value.brandTypePtr < *other.m_value.brandTypePtr ? -1 : 1;
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (m_value.brandTypePtr[i] == other.m_value.brandTypePtr[i])
                        {
                            continue;
                        }
                        return m_value.brandTypePtr[i] < other.m_value.brandTypePtr[i] ? -1 : 1;
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_BRIDGECHIPHIERARCHY:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlBridgeChipHierarchy_tCompare(m_value.bridgeChipHierarchy, other.m_value.bridgeChipHierarchy);
                    break; // NOT REACHED
                }
                case INJECTION_BRIDGECHIPHIERARCHY_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlBridgeChipHierarchy_tCompare(*m_value.bridgeChipHierarchyPtr, *other.m_value.bridgeChipHierarchyPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlBridgeChipHierarchy_tCompare(*m_value.bridgeChipHierarchyPtr, *other.m_value.bridgeChipHierarchyPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_CLOCKID:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.clockId < other.m_value.clockId)
                    {
                        return -1;
                    }
                    else if (m_value.clockId > other.m_value.clockId)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_CLOCKTYPE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.clockType < other.m_value.clockType)
                    {
                        return -1;
                    }
                    else if (m_value.clockType > other.m_value.clockType)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_COMPUTEINSTANCEINFO:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlComputeInstanceInfo_tCompare(m_value.computeInstanceInfo, other.m_value.computeInstanceInfo);
                    break; // NOT REACHED
                }
                case INJECTION_COMPUTEINSTANCEINFO_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlComputeInstanceInfo_tCompare(*m_value.computeInstanceInfoPtr, *other.m_value.computeInstanceInfoPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlComputeInstanceInfo_tCompare(*m_value.computeInstanceInfoPtr, *other.m_value.computeInstanceInfoPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_COMPUTEINSTANCEPROFILEINFO:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlComputeInstanceProfileInfo_tCompare(m_value.computeInstanceProfileInfo, other.m_value.computeInstanceProfileInfo);
                    break; // NOT REACHED
                }
                case INJECTION_COMPUTEINSTANCEPROFILEINFO_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlComputeInstanceProfileInfo_tCompare(*m_value.computeInstanceProfileInfoPtr, *other.m_value.computeInstanceProfileInfoPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlComputeInstanceProfileInfo_tCompare(*m_value.computeInstanceProfileInfoPtr, *other.m_value.computeInstanceProfileInfoPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_COMPUTEINSTANCEPROFILEINFO_V2:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlComputeInstanceProfileInfo_v2_tCompare(m_value.computeInstanceProfileInfo_v2, other.m_value.computeInstanceProfileInfo_v2);
                    break; // NOT REACHED
                }
                case INJECTION_COMPUTEINSTANCEPROFILEINFO_V2_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlComputeInstanceProfileInfo_v2_tCompare(*m_value.computeInstanceProfileInfo_v2Ptr, *other.m_value.computeInstanceProfileInfo_v2Ptr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlComputeInstanceProfileInfo_v2_tCompare(*m_value.computeInstanceProfileInfo_v2Ptr, *other.m_value.computeInstanceProfileInfo_v2Ptr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_COMPUTEINSTANCE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.computeInstance < other.m_value.computeInstance)
                    {
                        return -1;
                    }
                    else if (m_value.computeInstance > other.m_value.computeInstance)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_COMPUTEINSTANCE_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    unsigned size = m_isArray ? m_arrLen : 1;
                    return memcmp(m_value.computeInstancePtr, other.m_value.computeInstancePtr, size * sizeof(*m_value.computeInstancePtr));
                    break; // NOT REACHED
                }
                case INJECTION_COMPUTEMODE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.computeMode < other.m_value.computeMode)
                    {
                        return -1;
                    }
                    else if (m_value.computeMode > other.m_value.computeMode)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_COMPUTEMODE_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        if (*m_value.computeModePtr == *other.m_value.computeModePtr)
                        {
                            return 0;
                        }
                        return *m_value.computeModePtr < *other.m_value.computeModePtr ? -1 : 1;
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (m_value.computeModePtr[i] == other.m_value.computeModePtr[i])
                        {
                            continue;
                        }
                        return m_value.computeModePtr[i] < other.m_value.computeModePtr[i] ? -1 : 1;
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_CONFCOMPUTESYSTEMSTATE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlConfComputeSystemState_tCompare(m_value.confComputeSystemState, other.m_value.confComputeSystemState);
                    break; // NOT REACHED
                }
                case INJECTION_CONFCOMPUTESYSTEMSTATE_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlConfComputeSystemState_tCompare(*m_value.confComputeSystemStatePtr, *other.m_value.confComputeSystemStatePtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlConfComputeSystemState_tCompare(*m_value.confComputeSystemStatePtr, *other.m_value.confComputeSystemStatePtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_DETACHGPUSTATE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.detachGpuState < other.m_value.detachGpuState)
                    {
                        return -1;
                    }
                    else if (m_value.detachGpuState > other.m_value.detachGpuState)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_DEVICEATTRIBUTES:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlDeviceAttributes_tCompare(m_value.deviceAttributes, other.m_value.deviceAttributes);
                    break; // NOT REACHED
                }
                case INJECTION_DEVICEATTRIBUTES_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlDeviceAttributes_tCompare(*m_value.deviceAttributesPtr, *other.m_value.deviceAttributesPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlDeviceAttributes_tCompare(*m_value.deviceAttributesPtr, *other.m_value.deviceAttributesPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_DEVICE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.device < other.m_value.device)
                    {
                        return -1;
                    }
                    else if (m_value.device > other.m_value.device)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_DEVICE_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    unsigned size = m_isArray ? m_arrLen : 1;
                    return memcmp(m_value.devicePtr, other.m_value.devicePtr, size * sizeof(*m_value.devicePtr));
                    break; // NOT REACHED
                }
                case INJECTION_DRIVERMODEL:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.driverModel < other.m_value.driverModel)
                    {
                        return -1;
                    }
                    else if (m_value.driverModel > other.m_value.driverModel)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_DRIVERMODEL_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        if (*m_value.driverModelPtr == *other.m_value.driverModelPtr)
                        {
                            return 0;
                        }
                        return *m_value.driverModelPtr < *other.m_value.driverModelPtr ? -1 : 1;
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (m_value.driverModelPtr[i] == other.m_value.driverModelPtr[i])
                        {
                            continue;
                        }
                        return m_value.driverModelPtr[i] < other.m_value.driverModelPtr[i] ? -1 : 1;
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_ECCCOUNTERTYPE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.eccCounterType < other.m_value.eccCounterType)
                    {
                        return -1;
                    }
                    else if (m_value.eccCounterType > other.m_value.eccCounterType)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_ECCERRORCOUNTS:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlEccErrorCounts_tCompare(m_value.eccErrorCounts, other.m_value.eccErrorCounts);
                    break; // NOT REACHED
                }
                case INJECTION_ECCERRORCOUNTS_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlEccErrorCounts_tCompare(*m_value.eccErrorCountsPtr, *other.m_value.eccErrorCountsPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlEccErrorCounts_tCompare(*m_value.eccErrorCountsPtr, *other.m_value.eccErrorCountsPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_ENABLESTATE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.enableState < other.m_value.enableState)
                    {
                        return -1;
                    }
                    else if (m_value.enableState > other.m_value.enableState)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_ENABLESTATE_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        if (*m_value.enableStatePtr == *other.m_value.enableStatePtr)
                        {
                            return 0;
                        }
                        return *m_value.enableStatePtr < *other.m_value.enableStatePtr ? -1 : 1;
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (m_value.enableStatePtr[i] == other.m_value.enableStatePtr[i])
                        {
                            continue;
                        }
                        return m_value.enableStatePtr[i] < other.m_value.enableStatePtr[i] ? -1 : 1;
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_ENCODERSESSIONINFO:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlEncoderSessionInfo_tCompare(m_value.encoderSessionInfo, other.m_value.encoderSessionInfo);
                    break; // NOT REACHED
                }
                case INJECTION_ENCODERSESSIONINFO_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlEncoderSessionInfo_tCompare(*m_value.encoderSessionInfoPtr, *other.m_value.encoderSessionInfoPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlEncoderSessionInfo_tCompare(*m_value.encoderSessionInfoPtr, *other.m_value.encoderSessionInfoPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_ENCODERTYPE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.encoderType < other.m_value.encoderType)
                    {
                        return -1;
                    }
                    else if (m_value.encoderType > other.m_value.encoderType)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_EVENTDATA:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlEventData_tCompare(m_value.eventData, other.m_value.eventData);
                    break; // NOT REACHED
                }
                case INJECTION_EVENTDATA_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlEventData_tCompare(*m_value.eventDataPtr, *other.m_value.eventDataPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlEventData_tCompare(*m_value.eventDataPtr, *other.m_value.eventDataPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_EVENTSET:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return memcmp(&m_value.eventSet, &other.m_value.eventSet, sizeof(m_value.eventSet));
                    break; // NOT REACHED
                }
                case INJECTION_EVENTSET_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    unsigned size = m_isArray ? m_arrLen : 1;
                    return memcmp(m_value.eventSetPtr, other.m_value.eventSetPtr, size * sizeof(*m_value.eventSetPtr));
                    break; // NOT REACHED
                }
                case INJECTION_EXCLUDEDDEVICEINFO:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlExcludedDeviceInfo_tCompare(m_value.excludedDeviceInfo, other.m_value.excludedDeviceInfo);
                    break; // NOT REACHED
                }
                case INJECTION_EXCLUDEDDEVICEINFO_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlExcludedDeviceInfo_tCompare(*m_value.excludedDeviceInfoPtr, *other.m_value.excludedDeviceInfoPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlExcludedDeviceInfo_tCompare(*m_value.excludedDeviceInfoPtr, *other.m_value.excludedDeviceInfoPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_FBCSESSIONINFO:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlFBCSessionInfo_tCompare(m_value.fBCSessionInfo, other.m_value.fBCSessionInfo);
                    break; // NOT REACHED
                }
                case INJECTION_FBCSESSIONINFO_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlFBCSessionInfo_tCompare(*m_value.fBCSessionInfoPtr, *other.m_value.fBCSessionInfoPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlFBCSessionInfo_tCompare(*m_value.fBCSessionInfoPtr, *other.m_value.fBCSessionInfoPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_FBCSTATS:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlFBCStats_tCompare(m_value.fBCStats, other.m_value.fBCStats);
                    break; // NOT REACHED
                }
                case INJECTION_FBCSTATS_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlFBCStats_tCompare(*m_value.fBCStatsPtr, *other.m_value.fBCStatsPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlFBCStats_tCompare(*m_value.fBCStatsPtr, *other.m_value.fBCStatsPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_FIELDVALUE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlFieldValue_tCompare(m_value.fieldValue, other.m_value.fieldValue);
                    break; // NOT REACHED
                }
                case INJECTION_FIELDVALUE_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlFieldValue_tCompare(*m_value.fieldValuePtr, *other.m_value.fieldValuePtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlFieldValue_tCompare(*m_value.fieldValuePtr, *other.m_value.fieldValuePtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_GPMMETRICSGET:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return memcmp(&m_value.gpmMetricsGet, &other.m_value.gpmMetricsGet, sizeof(m_value.gpmMetricsGet));
                    break; // NOT REACHED
                }
                case INJECTION_GPMMETRICSGET_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    unsigned size = m_isArray ? m_arrLen : 1;
                    return memcmp(m_value.gpmMetricsGetPtr, other.m_value.gpmMetricsGetPtr, size * sizeof(*m_value.gpmMetricsGetPtr));
                    break; // NOT REACHED
                }
                case INJECTION_GPMSAMPLE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return memcmp(&m_value.gpmSample, &other.m_value.gpmSample, sizeof(m_value.gpmSample));
                    break; // NOT REACHED
                }
                case INJECTION_GPMSAMPLE_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    unsigned size = m_isArray ? m_arrLen : 1;
                    return memcmp(m_value.gpmSamplePtr, other.m_value.gpmSamplePtr, size * sizeof(*m_value.gpmSamplePtr));
                    break; // NOT REACHED
                }
                case INJECTION_GPMSUPPORT:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlGpmSupport_tCompare(m_value.gpmSupport, other.m_value.gpmSupport);
                    break; // NOT REACHED
                }
                case INJECTION_GPMSUPPORT_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlGpmSupport_tCompare(*m_value.gpmSupportPtr, *other.m_value.gpmSupportPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlGpmSupport_tCompare(*m_value.gpmSupportPtr, *other.m_value.gpmSupportPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_GPUDYNAMICPSTATESINFO:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return memcmp(&m_value.gpuDynamicPstatesInfo, &other.m_value.gpuDynamicPstatesInfo, sizeof(m_value.gpuDynamicPstatesInfo));
                    break; // NOT REACHED
                }
                case INJECTION_GPUDYNAMICPSTATESINFO_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    unsigned size = m_isArray ? m_arrLen : 1;
                    return memcmp(m_value.gpuDynamicPstatesInfoPtr, other.m_value.gpuDynamicPstatesInfoPtr, size * sizeof(*m_value.gpuDynamicPstatesInfoPtr));
                    break; // NOT REACHED
                }
                case INJECTION_GPUINSTANCEINFO:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlGpuInstanceInfo_tCompare(m_value.gpuInstanceInfo, other.m_value.gpuInstanceInfo);
                    break; // NOT REACHED
                }
                case INJECTION_GPUINSTANCEINFO_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlGpuInstanceInfo_tCompare(*m_value.gpuInstanceInfoPtr, *other.m_value.gpuInstanceInfoPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlGpuInstanceInfo_tCompare(*m_value.gpuInstanceInfoPtr, *other.m_value.gpuInstanceInfoPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_GPUINSTANCEPLACEMENT:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlGpuInstancePlacement_tCompare(m_value.gpuInstancePlacement, other.m_value.gpuInstancePlacement);
                    break; // NOT REACHED
                }
                case INJECTION_GPUINSTANCEPLACEMENT_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlGpuInstancePlacement_tCompare(*m_value.gpuInstancePlacementPtr, *other.m_value.gpuInstancePlacementPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlGpuInstancePlacement_tCompare(*m_value.gpuInstancePlacementPtr, *other.m_value.gpuInstancePlacementPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_GPUINSTANCEPROFILEINFO:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlGpuInstanceProfileInfo_tCompare(m_value.gpuInstanceProfileInfo, other.m_value.gpuInstanceProfileInfo);
                    break; // NOT REACHED
                }
                case INJECTION_GPUINSTANCEPROFILEINFO_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlGpuInstanceProfileInfo_tCompare(*m_value.gpuInstanceProfileInfoPtr, *other.m_value.gpuInstanceProfileInfoPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlGpuInstanceProfileInfo_tCompare(*m_value.gpuInstanceProfileInfoPtr, *other.m_value.gpuInstanceProfileInfoPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_GPUINSTANCEPROFILEINFO_V2:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlGpuInstanceProfileInfo_v2_tCompare(m_value.gpuInstanceProfileInfo_v2, other.m_value.gpuInstanceProfileInfo_v2);
                    break; // NOT REACHED
                }
                case INJECTION_GPUINSTANCEPROFILEINFO_V2_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlGpuInstanceProfileInfo_v2_tCompare(*m_value.gpuInstanceProfileInfo_v2Ptr, *other.m_value.gpuInstanceProfileInfo_v2Ptr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlGpuInstanceProfileInfo_v2_tCompare(*m_value.gpuInstanceProfileInfo_v2Ptr, *other.m_value.gpuInstanceProfileInfo_v2Ptr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_GPUINSTANCE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return memcmp(&m_value.gpuInstance, &other.m_value.gpuInstance, sizeof(m_value.gpuInstance));
                    break; // NOT REACHED
                }
                case INJECTION_GPUINSTANCE_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    unsigned size = m_isArray ? m_arrLen : 1;
                    return memcmp(m_value.gpuInstancePtr, other.m_value.gpuInstancePtr, size * sizeof(*m_value.gpuInstancePtr));
                    break; // NOT REACHED
                }
                case INJECTION_GPUOPERATIONMODE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.gpuOperationMode < other.m_value.gpuOperationMode)
                    {
                        return -1;
                    }
                    else if (m_value.gpuOperationMode > other.m_value.gpuOperationMode)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_GPUOPERATIONMODE_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        if (*m_value.gpuOperationModePtr == *other.m_value.gpuOperationModePtr)
                        {
                            return 0;
                        }
                        return *m_value.gpuOperationModePtr < *other.m_value.gpuOperationModePtr ? -1 : 1;
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (m_value.gpuOperationModePtr[i] == other.m_value.gpuOperationModePtr[i])
                        {
                            continue;
                        }
                        return m_value.gpuOperationModePtr[i] < other.m_value.gpuOperationModePtr[i] ? -1 : 1;
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_GPUP2PCAPSINDEX:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.gpuP2PCapsIndex < other.m_value.gpuP2PCapsIndex)
                    {
                        return -1;
                    }
                    else if (m_value.gpuP2PCapsIndex > other.m_value.gpuP2PCapsIndex)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_GPUP2PSTATUS:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.gpuP2PStatus < other.m_value.gpuP2PStatus)
                    {
                        return -1;
                    }
                    else if (m_value.gpuP2PStatus > other.m_value.gpuP2PStatus)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_GPUP2PSTATUS_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        if (*m_value.gpuP2PStatusPtr == *other.m_value.gpuP2PStatusPtr)
                        {
                            return 0;
                        }
                        return *m_value.gpuP2PStatusPtr < *other.m_value.gpuP2PStatusPtr ? -1 : 1;
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (m_value.gpuP2PStatusPtr[i] == other.m_value.gpuP2PStatusPtr[i])
                        {
                            continue;
                        }
                        return m_value.gpuP2PStatusPtr[i] < other.m_value.gpuP2PStatusPtr[i] ? -1 : 1;
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_GPUTHERMALSETTINGS:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return memcmp(&m_value.gpuThermalSettings, &other.m_value.gpuThermalSettings, sizeof(m_value.gpuThermalSettings));
                    break; // NOT REACHED
                }
                case INJECTION_GPUTHERMALSETTINGS_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    unsigned size = m_isArray ? m_arrLen : 1;
                    return memcmp(m_value.gpuThermalSettingsPtr, other.m_value.gpuThermalSettingsPtr, size * sizeof(*m_value.gpuThermalSettingsPtr));
                    break; // NOT REACHED
                }
                case INJECTION_GPUTOPOLOGYLEVEL:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.gpuTopologyLevel < other.m_value.gpuTopologyLevel)
                    {
                        return -1;
                    }
                    else if (m_value.gpuTopologyLevel > other.m_value.gpuTopologyLevel)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_GPUTOPOLOGYLEVEL_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        if (*m_value.gpuTopologyLevelPtr == *other.m_value.gpuTopologyLevelPtr)
                        {
                            return 0;
                        }
                        return *m_value.gpuTopologyLevelPtr < *other.m_value.gpuTopologyLevelPtr ? -1 : 1;
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (m_value.gpuTopologyLevelPtr[i] == other.m_value.gpuTopologyLevelPtr[i])
                        {
                            continue;
                        }
                        return m_value.gpuTopologyLevelPtr[i] < other.m_value.gpuTopologyLevelPtr[i] ? -1 : 1;
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_GPUVIRTUALIZATIONMODE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.gpuVirtualizationMode < other.m_value.gpuVirtualizationMode)
                    {
                        return -1;
                    }
                    else if (m_value.gpuVirtualizationMode > other.m_value.gpuVirtualizationMode)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_GPUVIRTUALIZATIONMODE_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        if (*m_value.gpuVirtualizationModePtr == *other.m_value.gpuVirtualizationModePtr)
                        {
                            return 0;
                        }
                        return *m_value.gpuVirtualizationModePtr < *other.m_value.gpuVirtualizationModePtr ? -1 : 1;
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (m_value.gpuVirtualizationModePtr[i] == other.m_value.gpuVirtualizationModePtr[i])
                        {
                            continue;
                        }
                        return m_value.gpuVirtualizationModePtr[i] < other.m_value.gpuVirtualizationModePtr[i] ? -1 : 1;
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_GRIDLICENSABLEFEATURES:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlGridLicensableFeatures_tCompare(m_value.gridLicensableFeatures, other.m_value.gridLicensableFeatures);
                    break; // NOT REACHED
                }
                case INJECTION_GRIDLICENSABLEFEATURES_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlGridLicensableFeatures_tCompare(*m_value.gridLicensableFeaturesPtr, *other.m_value.gridLicensableFeaturesPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlGridLicensableFeatures_tCompare(*m_value.gridLicensableFeaturesPtr, *other.m_value.gridLicensableFeaturesPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_HOSTVGPUMODE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.hostVgpuMode < other.m_value.hostVgpuMode)
                    {
                        return -1;
                    }
                    else if (m_value.hostVgpuMode > other.m_value.hostVgpuMode)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_HOSTVGPUMODE_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        if (*m_value.hostVgpuModePtr == *other.m_value.hostVgpuModePtr)
                        {
                            return 0;
                        }
                        return *m_value.hostVgpuModePtr < *other.m_value.hostVgpuModePtr ? -1 : 1;
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (m_value.hostVgpuModePtr[i] == other.m_value.hostVgpuModePtr[i])
                        {
                            continue;
                        }
                        return m_value.hostVgpuModePtr[i] < other.m_value.hostVgpuModePtr[i] ? -1 : 1;
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_HWBCENTRY:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlHwbcEntry_tCompare(m_value.hwbcEntry, other.m_value.hwbcEntry);
                    break; // NOT REACHED
                }
                case INJECTION_HWBCENTRY_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlHwbcEntry_tCompare(*m_value.hwbcEntryPtr, *other.m_value.hwbcEntryPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlHwbcEntry_tCompare(*m_value.hwbcEntryPtr, *other.m_value.hwbcEntryPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_INFOROMOBJECT:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.inforomObject < other.m_value.inforomObject)
                    {
                        return -1;
                    }
                    else if (m_value.inforomObject > other.m_value.inforomObject)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_INTNVLINKDEVICETYPE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.intNvLinkDeviceType < other.m_value.intNvLinkDeviceType)
                    {
                        return -1;
                    }
                    else if (m_value.intNvLinkDeviceType > other.m_value.intNvLinkDeviceType)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_INTNVLINKDEVICETYPE_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        if (*m_value.intNvLinkDeviceTypePtr == *other.m_value.intNvLinkDeviceTypePtr)
                        {
                            return 0;
                        }
                        return *m_value.intNvLinkDeviceTypePtr < *other.m_value.intNvLinkDeviceTypePtr ? -1 : 1;
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (m_value.intNvLinkDeviceTypePtr[i] == other.m_value.intNvLinkDeviceTypePtr[i])
                        {
                            continue;
                        }
                        return m_value.intNvLinkDeviceTypePtr[i] < other.m_value.intNvLinkDeviceTypePtr[i] ? -1 : 1;
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_LEDCOLOR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.ledColor < other.m_value.ledColor)
                    {
                        return -1;
                    }
                    else if (m_value.ledColor > other.m_value.ledColor)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_LEDSTATE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlLedState_tCompare(m_value.ledState, other.m_value.ledState);
                    break; // NOT REACHED
                }
                case INJECTION_LEDSTATE_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlLedState_tCompare(*m_value.ledStatePtr, *other.m_value.ledStatePtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlLedState_tCompare(*m_value.ledStatePtr, *other.m_value.ledStatePtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_MEMORYERRORTYPE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.memoryErrorType < other.m_value.memoryErrorType)
                    {
                        return -1;
                    }
                    else if (m_value.memoryErrorType > other.m_value.memoryErrorType)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_MEMORYLOCATION:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.memoryLocation < other.m_value.memoryLocation)
                    {
                        return -1;
                    }
                    else if (m_value.memoryLocation > other.m_value.memoryLocation)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_MEMORY:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlMemory_tCompare(m_value.memory, other.m_value.memory);
                    break; // NOT REACHED
                }
                case INJECTION_MEMORY_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlMemory_tCompare(*m_value.memoryPtr, *other.m_value.memoryPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlMemory_tCompare(*m_value.memoryPtr, *other.m_value.memoryPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_MEMORY_V2:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlMemory_v2_tCompare(m_value.memory_v2, other.m_value.memory_v2);
                    break; // NOT REACHED
                }
                case INJECTION_MEMORY_V2_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlMemory_v2_tCompare(*m_value.memory_v2Ptr, *other.m_value.memory_v2Ptr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlMemory_v2_tCompare(*m_value.memory_v2Ptr, *other.m_value.memory_v2Ptr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_NVLINKCAPABILITY:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.nvLinkCapability < other.m_value.nvLinkCapability)
                    {
                        return -1;
                    }
                    else if (m_value.nvLinkCapability > other.m_value.nvLinkCapability)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_NVLINKERRORCOUNTER:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.nvLinkErrorCounter < other.m_value.nvLinkErrorCounter)
                    {
                        return -1;
                    }
                    else if (m_value.nvLinkErrorCounter > other.m_value.nvLinkErrorCounter)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_NVLINKUTILIZATIONCONTROL:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlNvLinkUtilizationControl_tCompare(m_value.nvLinkUtilizationControl, other.m_value.nvLinkUtilizationControl);
                    break; // NOT REACHED
                }
                case INJECTION_NVLINKUTILIZATIONCONTROL_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlNvLinkUtilizationControl_tCompare(*m_value.nvLinkUtilizationControlPtr, *other.m_value.nvLinkUtilizationControlPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlNvLinkUtilizationControl_tCompare(*m_value.nvLinkUtilizationControlPtr, *other.m_value.nvLinkUtilizationControlPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_PSUINFO:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlPSUInfo_tCompare(m_value.pSUInfo, other.m_value.pSUInfo);
                    break; // NOT REACHED
                }
                case INJECTION_PSUINFO_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlPSUInfo_tCompare(*m_value.pSUInfoPtr, *other.m_value.pSUInfoPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlPSUInfo_tCompare(*m_value.pSUInfoPtr, *other.m_value.pSUInfoPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_PAGERETIREMENTCAUSE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.pageRetirementCause < other.m_value.pageRetirementCause)
                    {
                        return -1;
                    }
                    else if (m_value.pageRetirementCause > other.m_value.pageRetirementCause)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_PCIINFO:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlPciInfo_tCompare(m_value.pciInfo, other.m_value.pciInfo);
                    break; // NOT REACHED
                }
                case INJECTION_PCIINFO_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlPciInfo_tCompare(*m_value.pciInfoPtr, *other.m_value.pciInfoPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlPciInfo_tCompare(*m_value.pciInfoPtr, *other.m_value.pciInfoPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_PCIELINKSTATE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.pcieLinkState < other.m_value.pcieLinkState)
                    {
                        return -1;
                    }
                    else if (m_value.pcieLinkState > other.m_value.pcieLinkState)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_PCIEUTILCOUNTER:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.pcieUtilCounter < other.m_value.pcieUtilCounter)
                    {
                        return -1;
                    }
                    else if (m_value.pcieUtilCounter > other.m_value.pcieUtilCounter)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_PERFPOLICYTYPE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.perfPolicyType < other.m_value.perfPolicyType)
                    {
                        return -1;
                    }
                    else if (m_value.perfPolicyType > other.m_value.perfPolicyType)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_PROCESSINFO:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlProcessInfo_tCompare(m_value.processInfo, other.m_value.processInfo);
                    break; // NOT REACHED
                }
                case INJECTION_PROCESSINFO_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlProcessInfo_tCompare(*m_value.processInfoPtr, *other.m_value.processInfoPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlProcessInfo_tCompare(*m_value.processInfoPtr, *other.m_value.processInfoPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_PROCESSINFO_V1:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlProcessInfo_v1_tCompare(m_value.processInfo_v1, other.m_value.processInfo_v1);
                    break; // NOT REACHED
                }
                case INJECTION_PROCESSINFO_V1_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlProcessInfo_v1_tCompare(*m_value.processInfo_v1Ptr, *other.m_value.processInfo_v1Ptr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlProcessInfo_v1_tCompare(*m_value.processInfo_v1Ptr, *other.m_value.processInfo_v1Ptr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_PROCESSINFO_V2:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlProcessInfo_v2_tCompare(m_value.processInfo_v2, other.m_value.processInfo_v2);
                    break; // NOT REACHED
                }
                case INJECTION_PROCESSINFO_V2_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlProcessInfo_v2_tCompare(*m_value.processInfo_v2Ptr, *other.m_value.processInfo_v2Ptr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlProcessInfo_v2_tCompare(*m_value.processInfo_v2Ptr, *other.m_value.processInfo_v2Ptr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_PROCESSUTILIZATIONSAMPLE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlProcessUtilizationSample_tCompare(m_value.processUtilizationSample, other.m_value.processUtilizationSample);
                    break; // NOT REACHED
                }
                case INJECTION_PROCESSUTILIZATIONSAMPLE_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlProcessUtilizationSample_tCompare(*m_value.processUtilizationSamplePtr, *other.m_value.processUtilizationSamplePtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlProcessUtilizationSample_tCompare(*m_value.processUtilizationSamplePtr, *other.m_value.processUtilizationSamplePtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_PSTATES:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.pstates < other.m_value.pstates)
                    {
                        return -1;
                    }
                    else if (m_value.pstates > other.m_value.pstates)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_PSTATES_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        if (*m_value.pstatesPtr == *other.m_value.pstatesPtr)
                        {
                            return 0;
                        }
                        return *m_value.pstatesPtr < *other.m_value.pstatesPtr ? -1 : 1;
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (m_value.pstatesPtr[i] == other.m_value.pstatesPtr[i])
                        {
                            continue;
                        }
                        return m_value.pstatesPtr[i] < other.m_value.pstatesPtr[i] ? -1 : 1;
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_RESTRICTEDAPI:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.restrictedAPI < other.m_value.restrictedAPI)
                    {
                        return -1;
                    }
                    else if (m_value.restrictedAPI > other.m_value.restrictedAPI)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_RETURN:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.nvmlReturn < other.m_value.nvmlReturn)
                    {
                        return -1;
                    }
                    else if (m_value.nvmlReturn > other.m_value.nvmlReturn)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_RETURN_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        if (*m_value.nvmlReturnPtr == *other.m_value.nvmlReturnPtr)
                        {
                            return 0;
                        }
                        return *m_value.nvmlReturnPtr < *other.m_value.nvmlReturnPtr ? -1 : 1;
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (m_value.nvmlReturnPtr[i] == other.m_value.nvmlReturnPtr[i])
                        {
                            continue;
                        }
                        return m_value.nvmlReturnPtr[i] < other.m_value.nvmlReturnPtr[i] ? -1 : 1;
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_ROWREMAPPERHISTOGRAMVALUES:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlRowRemapperHistogramValues_tCompare(m_value.rowRemapperHistogramValues, other.m_value.rowRemapperHistogramValues);
                    break; // NOT REACHED
                }
                case INJECTION_ROWREMAPPERHISTOGRAMVALUES_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlRowRemapperHistogramValues_tCompare(*m_value.rowRemapperHistogramValuesPtr, *other.m_value.rowRemapperHistogramValuesPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlRowRemapperHistogramValues_tCompare(*m_value.rowRemapperHistogramValuesPtr, *other.m_value.rowRemapperHistogramValuesPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_SAMPLE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlSample_tCompare(m_value.sample, other.m_value.sample);
                    break; // NOT REACHED
                }
                case INJECTION_SAMPLE_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlSample_tCompare(*m_value.samplePtr, *other.m_value.samplePtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlSample_tCompare(*m_value.samplePtr, *other.m_value.samplePtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_SAMPLINGTYPE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.samplingType < other.m_value.samplingType)
                    {
                        return -1;
                    }
                    else if (m_value.samplingType > other.m_value.samplingType)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_TEMPERATURESENSORS:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.temperatureSensors < other.m_value.temperatureSensors)
                    {
                        return -1;
                    }
                    else if (m_value.temperatureSensors > other.m_value.temperatureSensors)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_TEMPERATURETHRESHOLDS:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.temperatureThresholds < other.m_value.temperatureThresholds)
                    {
                        return -1;
                    }
                    else if (m_value.temperatureThresholds > other.m_value.temperatureThresholds)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_UNITFANSPEEDS:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlUnitFanSpeeds_tCompare(m_value.unitFanSpeeds, other.m_value.unitFanSpeeds);
                    break; // NOT REACHED
                }
                case INJECTION_UNITFANSPEEDS_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlUnitFanSpeeds_tCompare(*m_value.unitFanSpeedsPtr, *other.m_value.unitFanSpeedsPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlUnitFanSpeeds_tCompare(*m_value.unitFanSpeedsPtr, *other.m_value.unitFanSpeedsPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_UNITINFO:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlUnitInfo_tCompare(m_value.unitInfo, other.m_value.unitInfo);
                    break; // NOT REACHED
                }
                case INJECTION_UNITINFO_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlUnitInfo_tCompare(*m_value.unitInfoPtr, *other.m_value.unitInfoPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlUnitInfo_tCompare(*m_value.unitInfoPtr, *other.m_value.unitInfoPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_UNIT:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return memcmp(&m_value.unit, &other.m_value.unit, sizeof(m_value.unit));
                    break; // NOT REACHED
                }
                case INJECTION_UNIT_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    unsigned size = m_isArray ? m_arrLen : 1;
                    return memcmp(m_value.unitPtr, other.m_value.unitPtr, size * sizeof(*m_value.unitPtr));
                    break; // NOT REACHED
                }
                case INJECTION_UTILIZATION:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlUtilization_tCompare(m_value.utilization, other.m_value.utilization);
                    break; // NOT REACHED
                }
                case INJECTION_UTILIZATION_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlUtilization_tCompare(*m_value.utilizationPtr, *other.m_value.utilizationPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlUtilization_tCompare(*m_value.utilizationPtr, *other.m_value.utilizationPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_VALUETYPE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.valueType < other.m_value.valueType)
                    {
                        return -1;
                    }
                    else if (m_value.valueType > other.m_value.valueType)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_VALUETYPE_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        if (*m_value.valueTypePtr == *other.m_value.valueTypePtr)
                        {
                            return 0;
                        }
                        return *m_value.valueTypePtr < *other.m_value.valueTypePtr ? -1 : 1;
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (m_value.valueTypePtr[i] == other.m_value.valueTypePtr[i])
                        {
                            continue;
                        }
                        return m_value.valueTypePtr[i] < other.m_value.valueTypePtr[i] ? -1 : 1;
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_VGPUCAPABILITY:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.vgpuCapability < other.m_value.vgpuCapability)
                    {
                        return -1;
                    }
                    else if (m_value.vgpuCapability > other.m_value.vgpuCapability)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_VGPUINSTANCEUTILIZATIONSAMPLE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlVgpuInstanceUtilizationSample_tCompare(m_value.vgpuInstanceUtilizationSample, other.m_value.vgpuInstanceUtilizationSample);
                    break; // NOT REACHED
                }
                case INJECTION_VGPUINSTANCEUTILIZATIONSAMPLE_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlVgpuInstanceUtilizationSample_tCompare(*m_value.vgpuInstanceUtilizationSamplePtr, *other.m_value.vgpuInstanceUtilizationSamplePtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlVgpuInstanceUtilizationSample_tCompare(*m_value.vgpuInstanceUtilizationSamplePtr, *other.m_value.vgpuInstanceUtilizationSamplePtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_VGPULICENSEINFO:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlVgpuLicenseInfo_tCompare(m_value.vgpuLicenseInfo, other.m_value.vgpuLicenseInfo);
                    break; // NOT REACHED
                }
                case INJECTION_VGPULICENSEINFO_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlVgpuLicenseInfo_tCompare(*m_value.vgpuLicenseInfoPtr, *other.m_value.vgpuLicenseInfoPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlVgpuLicenseInfo_tCompare(*m_value.vgpuLicenseInfoPtr, *other.m_value.vgpuLicenseInfoPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_VGPUMETADATA:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlVgpuMetadata_tCompare(m_value.vgpuMetadata, other.m_value.vgpuMetadata);
                    break; // NOT REACHED
                }
                case INJECTION_VGPUMETADATA_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlVgpuMetadata_tCompare(*m_value.vgpuMetadataPtr, *other.m_value.vgpuMetadataPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlVgpuMetadata_tCompare(*m_value.vgpuMetadataPtr, *other.m_value.vgpuMetadataPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_VGPUPGPUCOMPATIBILITY:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlVgpuPgpuCompatibility_tCompare(m_value.vgpuPgpuCompatibility, other.m_value.vgpuPgpuCompatibility);
                    break; // NOT REACHED
                }
                case INJECTION_VGPUPGPUCOMPATIBILITY_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlVgpuPgpuCompatibility_tCompare(*m_value.vgpuPgpuCompatibilityPtr, *other.m_value.vgpuPgpuCompatibilityPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlVgpuPgpuCompatibility_tCompare(*m_value.vgpuPgpuCompatibilityPtr, *other.m_value.vgpuPgpuCompatibilityPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_VGPUPGPUMETADATA:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlVgpuPgpuMetadata_tCompare(m_value.vgpuPgpuMetadata, other.m_value.vgpuPgpuMetadata);
                    break; // NOT REACHED
                }
                case INJECTION_VGPUPGPUMETADATA_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlVgpuPgpuMetadata_tCompare(*m_value.vgpuPgpuMetadataPtr, *other.m_value.vgpuPgpuMetadataPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlVgpuPgpuMetadata_tCompare(*m_value.vgpuPgpuMetadataPtr, *other.m_value.vgpuPgpuMetadataPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_VGPUPROCESSUTILIZATIONSAMPLE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlVgpuProcessUtilizationSample_tCompare(m_value.vgpuProcessUtilizationSample, other.m_value.vgpuProcessUtilizationSample);
                    break; // NOT REACHED
                }
                case INJECTION_VGPUPROCESSUTILIZATIONSAMPLE_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlVgpuProcessUtilizationSample_tCompare(*m_value.vgpuProcessUtilizationSamplePtr, *other.m_value.vgpuProcessUtilizationSamplePtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlVgpuProcessUtilizationSample_tCompare(*m_value.vgpuProcessUtilizationSamplePtr, *other.m_value.vgpuProcessUtilizationSamplePtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_VGPUVERSION:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlVgpuVersion_tCompare(m_value.vgpuVersion, other.m_value.vgpuVersion);
                    break; // NOT REACHED
                }
                case INJECTION_VGPUVERSION_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlVgpuVersion_tCompare(*m_value.vgpuVersionPtr, *other.m_value.vgpuVersionPtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlVgpuVersion_tCompare(*m_value.vgpuVersionPtr, *other.m_value.vgpuVersionPtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_VGPUVMIDTYPE:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.vgpuVmIdType < other.m_value.vgpuVmIdType)
                    {
                        return -1;
                    }
                    else if (m_value.vgpuVmIdType > other.m_value.vgpuVmIdType)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_VGPUVMIDTYPE_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        if (*m_value.vgpuVmIdTypePtr == *other.m_value.vgpuVmIdTypePtr)
                        {
                            return 0;
                        }
                        return *m_value.vgpuVmIdTypePtr < *other.m_value.vgpuVmIdTypePtr ? -1 : 1;
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (m_value.vgpuVmIdTypePtr[i] == other.m_value.vgpuVmIdTypePtr[i])
                        {
                            continue;
                        }
                        return m_value.vgpuVmIdTypePtr[i] < other.m_value.vgpuVmIdTypePtr[i] ? -1 : 1;
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_VIOLATIONTIME:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    return nvmlViolationTime_tCompare(m_value.violationTime, other.m_value.violationTime);
                    break; // NOT REACHED
                }
                case INJECTION_VIOLATIONTIME_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        return nvmlViolationTime_tCompare(*m_value.violationTimePtr, *other.m_value.violationTimePtr);
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (auto ret = nvmlViolationTime_tCompare(*m_value.violationTimePtr, *other.m_value.violationTimePtr); ret)
                        {
                            return ret;
                        }
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_UINT:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.ui < other.m_value.ui)
                    {
                        return -1;
                    }
                    else if (m_value.ui > other.m_value.ui)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_UINT_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        if (*m_value.uiPtr == *other.m_value.uiPtr)
                        {
                            return 0;
                        }
                        return *m_value.uiPtr < *other.m_value.uiPtr ? -1 : 1;
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (m_value.uiPtr[i] == other.m_value.uiPtr[i])
                        {
                            continue;
                        }
                        return m_value.uiPtr[i] < other.m_value.uiPtr[i] ? -1 : 1;
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_ULONG:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.ul < other.m_value.ul)
                    {
                        return -1;
                    }
                    else if (m_value.ul > other.m_value.ul)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_ULONG_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        if (*m_value.ulPtr == *other.m_value.ulPtr)
                        {
                            return 0;
                        }
                        return *m_value.ulPtr < *other.m_value.ulPtr ? -1 : 1;
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (m_value.ulPtr[i] == other.m_value.ulPtr[i])
                        {
                            continue;
                        }
                        return m_value.ulPtr[i] < other.m_value.ulPtr[i] ? -1 : 1;
                    }
                    return 0;
                    break; // NOT REACHED
                }
                case INJECTION_ULONG_LONG:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (m_value.ull < other.m_value.ull)
                    {
                        return -1;
                    }
                    else if (m_value.ull > other.m_value.ull)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break; // NOT REACHED
                }
                case INJECTION_ULONG_LONG_PTR:
                {
                    // The following snippet is generated from write_injection_argument_compare
                    if (!m_isArray)
                    {
                        if (*m_value.ullPtr == *other.m_value.ullPtr)
                        {
                            return 0;
                        }
                        return *m_value.ullPtr < *other.m_value.ullPtr ? -1 : 1;
                    }
                    for (unsigned i = 0; i < m_arrLen; ++i)
                    {
                        if (m_value.ullPtr[i] == other.m_value.ullPtr[i])
                        {
                            continue;
                        }
                        return m_value.ullPtr[i] < other.m_value.ullPtr[i] ? -1 : 1;
                    }
                    return 0;
                    break; // NOT REACHED
                }
                default:
                    break;
            }
        }
    }
    return 1;
}

// InjectionArgument may be copied for serveral cases.
// But we keep the ownership of pointer in nvml injection lib.
// We free it when we shutdown the injection lib.
// The following snippet is generated from write_injection_free_function
InjectionArgument::~InjectionArgument()
{
    switch (this->m_type)
    {
        case INJECTION_CHAR_PTR:
        {
            if (m_inHeap && m_value.str)
            {
                free(m_value.str);
            }
        }
        break;
        case INJECTION_INT_PTR:
        {
            if (m_inHeap && m_value.iPtr)
            {
                free(m_value.iPtr);
            }
        }
        break;
        case INJECTION_ACCOUNTINGSTATS_PTR:
        {
            if (m_inHeap && m_value.accountingStatsPtr)
            {
                free(m_value.accountingStatsPtr);
            }
        }
        break;
        case INJECTION_BAR1MEMORY_PTR:
        {
            if (m_inHeap && m_value.bar1MemoryPtr)
            {
                free(m_value.bar1MemoryPtr);
            }
        }
        break;
        case INJECTION_BRANDTYPE_PTR:
        {
            if (m_inHeap && m_value.brandTypePtr)
            {
                free(m_value.brandTypePtr);
            }
        }
        break;
        case INJECTION_BRIDGECHIPHIERARCHY_PTR:
        {
            if (m_inHeap && m_value.bridgeChipHierarchyPtr)
            {
                free(m_value.bridgeChipHierarchyPtr);
            }
        }
        break;
        case INJECTION_COMPUTEINSTANCEINFO_PTR:
        {
            if (m_inHeap && m_value.computeInstanceInfoPtr)
            {
                free(m_value.computeInstanceInfoPtr);
            }
        }
        break;
        case INJECTION_COMPUTEINSTANCEPROFILEINFO_PTR:
        {
            if (m_inHeap && m_value.computeInstanceProfileInfoPtr)
            {
                free(m_value.computeInstanceProfileInfoPtr);
            }
        }
        break;
        case INJECTION_COMPUTEINSTANCEPROFILEINFO_V2_PTR:
        {
            if (m_inHeap && m_value.computeInstanceProfileInfo_v2Ptr)
            {
                free(m_value.computeInstanceProfileInfo_v2Ptr);
            }
        }
        break;
        case INJECTION_COMPUTEINSTANCE_PTR:
        {
            if (m_inHeap && m_value.computeInstancePtr)
            {
                free(m_value.computeInstancePtr);
            }
        }
        break;
        case INJECTION_COMPUTEMODE_PTR:
        {
            if (m_inHeap && m_value.computeModePtr)
            {
                free(m_value.computeModePtr);
            }
        }
        break;
        case INJECTION_CONFCOMPUTESYSTEMSTATE_PTR:
        {
            if (m_inHeap && m_value.confComputeSystemStatePtr)
            {
                free(m_value.confComputeSystemStatePtr);
            }
        }
        break;
        case INJECTION_DEVICEATTRIBUTES_PTR:
        {
            if (m_inHeap && m_value.deviceAttributesPtr)
            {
                free(m_value.deviceAttributesPtr);
            }
        }
        break;
        case INJECTION_DEVICE_PTR:
        {
            if (m_inHeap && m_value.devicePtr)
            {
                free(m_value.devicePtr);
            }
        }
        break;
        case INJECTION_DRIVERMODEL_PTR:
        {
            if (m_inHeap && m_value.driverModelPtr)
            {
                free(m_value.driverModelPtr);
            }
        }
        break;
        case INJECTION_ECCERRORCOUNTS_PTR:
        {
            if (m_inHeap && m_value.eccErrorCountsPtr)
            {
                free(m_value.eccErrorCountsPtr);
            }
        }
        break;
        case INJECTION_ENABLESTATE_PTR:
        {
            if (m_inHeap && m_value.enableStatePtr)
            {
                free(m_value.enableStatePtr);
            }
        }
        break;
        case INJECTION_ENCODERSESSIONINFO_PTR:
        {
            if (m_inHeap && m_value.encoderSessionInfoPtr)
            {
                free(m_value.encoderSessionInfoPtr);
            }
        }
        break;
        case INJECTION_EVENTDATA_PTR:
        {
            if (m_inHeap && m_value.eventDataPtr)
            {
                free(m_value.eventDataPtr);
            }
        }
        break;
        case INJECTION_EVENTSET_PTR:
        {
            if (m_inHeap && m_value.eventSetPtr)
            {
                free(m_value.eventSetPtr);
            }
        }
        break;
        case INJECTION_EXCLUDEDDEVICEINFO_PTR:
        {
            if (m_inHeap && m_value.excludedDeviceInfoPtr)
            {
                free(m_value.excludedDeviceInfoPtr);
            }
        }
        break;
        case INJECTION_FBCSESSIONINFO_PTR:
        {
            if (m_inHeap && m_value.fBCSessionInfoPtr)
            {
                free(m_value.fBCSessionInfoPtr);
            }
        }
        break;
        case INJECTION_FBCSTATS_PTR:
        {
            if (m_inHeap && m_value.fBCStatsPtr)
            {
                free(m_value.fBCStatsPtr);
            }
        }
        break;
        case INJECTION_FIELDVALUE_PTR:
        {
            if (m_inHeap && m_value.fieldValuePtr)
            {
                free(m_value.fieldValuePtr);
            }
        }
        break;
        case INJECTION_GPMMETRICSGET_PTR:
        {
            if (m_inHeap && m_value.gpmMetricsGetPtr)
            {
                free(m_value.gpmMetricsGetPtr);
            }
        }
        break;
        case INJECTION_GPMSAMPLE_PTR:
        {
            if (m_inHeap && m_value.gpmSamplePtr)
            {
                free(m_value.gpmSamplePtr);
            }
        }
        break;
        case INJECTION_GPMSUPPORT_PTR:
        {
            if (m_inHeap && m_value.gpmSupportPtr)
            {
                free(m_value.gpmSupportPtr);
            }
        }
        break;
        case INJECTION_GPUDYNAMICPSTATESINFO_PTR:
        {
            if (m_inHeap && m_value.gpuDynamicPstatesInfoPtr)
            {
                free(m_value.gpuDynamicPstatesInfoPtr);
            }
        }
        break;
        case INJECTION_GPUINSTANCEINFO_PTR:
        {
            if (m_inHeap && m_value.gpuInstanceInfoPtr)
            {
                free(m_value.gpuInstanceInfoPtr);
            }
        }
        break;
        case INJECTION_GPUINSTANCEPLACEMENT_PTR:
        {
            if (m_inHeap && m_value.gpuInstancePlacementPtr)
            {
                free(m_value.gpuInstancePlacementPtr);
            }
        }
        break;
        case INJECTION_GPUINSTANCEPROFILEINFO_PTR:
        {
            if (m_inHeap && m_value.gpuInstanceProfileInfoPtr)
            {
                free(m_value.gpuInstanceProfileInfoPtr);
            }
        }
        break;
        case INJECTION_GPUINSTANCEPROFILEINFO_V2_PTR:
        {
            if (m_inHeap && m_value.gpuInstanceProfileInfo_v2Ptr)
            {
                free(m_value.gpuInstanceProfileInfo_v2Ptr);
            }
        }
        break;
        case INJECTION_GPUINSTANCE_PTR:
        {
            if (m_inHeap && m_value.gpuInstancePtr)
            {
                free(m_value.gpuInstancePtr);
            }
        }
        break;
        case INJECTION_GPUOPERATIONMODE_PTR:
        {
            if (m_inHeap && m_value.gpuOperationModePtr)
            {
                free(m_value.gpuOperationModePtr);
            }
        }
        break;
        case INJECTION_GPUP2PSTATUS_PTR:
        {
            if (m_inHeap && m_value.gpuP2PStatusPtr)
            {
                free(m_value.gpuP2PStatusPtr);
            }
        }
        break;
        case INJECTION_GPUTHERMALSETTINGS_PTR:
        {
            if (m_inHeap && m_value.gpuThermalSettingsPtr)
            {
                free(m_value.gpuThermalSettingsPtr);
            }
        }
        break;
        case INJECTION_GPUTOPOLOGYLEVEL_PTR:
        {
            if (m_inHeap && m_value.gpuTopologyLevelPtr)
            {
                free(m_value.gpuTopologyLevelPtr);
            }
        }
        break;
        case INJECTION_GPUVIRTUALIZATIONMODE_PTR:
        {
            if (m_inHeap && m_value.gpuVirtualizationModePtr)
            {
                free(m_value.gpuVirtualizationModePtr);
            }
        }
        break;
        case INJECTION_GRIDLICENSABLEFEATURES_PTR:
        {
            if (m_inHeap && m_value.gridLicensableFeaturesPtr)
            {
                free(m_value.gridLicensableFeaturesPtr);
            }
        }
        break;
        case INJECTION_HOSTVGPUMODE_PTR:
        {
            if (m_inHeap && m_value.hostVgpuModePtr)
            {
                free(m_value.hostVgpuModePtr);
            }
        }
        break;
        case INJECTION_HWBCENTRY_PTR:
        {
            if (m_inHeap && m_value.hwbcEntryPtr)
            {
                free(m_value.hwbcEntryPtr);
            }
        }
        break;
        case INJECTION_INTNVLINKDEVICETYPE_PTR:
        {
            if (m_inHeap && m_value.intNvLinkDeviceTypePtr)
            {
                free(m_value.intNvLinkDeviceTypePtr);
            }
        }
        break;
        case INJECTION_LEDSTATE_PTR:
        {
            if (m_inHeap && m_value.ledStatePtr)
            {
                free(m_value.ledStatePtr);
            }
        }
        break;
        case INJECTION_MEMORY_PTR:
        {
            if (m_inHeap && m_value.memoryPtr)
            {
                free(m_value.memoryPtr);
            }
        }
        break;
        case INJECTION_MEMORY_V2_PTR:
        {
            if (m_inHeap && m_value.memory_v2Ptr)
            {
                free(m_value.memory_v2Ptr);
            }
        }
        break;
        case INJECTION_NVLINKUTILIZATIONCONTROL_PTR:
        {
            if (m_inHeap && m_value.nvLinkUtilizationControlPtr)
            {
                free(m_value.nvLinkUtilizationControlPtr);
            }
        }
        break;
        case INJECTION_PSUINFO_PTR:
        {
            if (m_inHeap && m_value.pSUInfoPtr)
            {
                free(m_value.pSUInfoPtr);
            }
        }
        break;
        case INJECTION_PCIINFO_PTR:
        {
            if (m_inHeap && m_value.pciInfoPtr)
            {
                free(m_value.pciInfoPtr);
            }
        }
        break;
        case INJECTION_PROCESSINFO_PTR:
        {
            if (m_inHeap && m_value.processInfoPtr)
            {
                free(m_value.processInfoPtr);
            }
        }
        break;
        case INJECTION_PROCESSINFO_V1_PTR:
        {
            if (m_inHeap && m_value.processInfo_v1Ptr)
            {
                free(m_value.processInfo_v1Ptr);
            }
        }
        break;
        case INJECTION_PROCESSINFO_V2_PTR:
        {
            if (m_inHeap && m_value.processInfo_v2Ptr)
            {
                free(m_value.processInfo_v2Ptr);
            }
        }
        break;
        case INJECTION_PROCESSUTILIZATIONSAMPLE_PTR:
        {
            if (m_inHeap && m_value.processUtilizationSamplePtr)
            {
                free(m_value.processUtilizationSamplePtr);
            }
        }
        break;
        case INJECTION_PSTATES_PTR:
        {
            if (m_inHeap && m_value.pstatesPtr)
            {
                free(m_value.pstatesPtr);
            }
        }
        break;
        case INJECTION_RETURN_PTR:
        {
            if (m_inHeap && m_value.nvmlReturnPtr)
            {
                free(m_value.nvmlReturnPtr);
            }
        }
        break;
        case INJECTION_ROWREMAPPERHISTOGRAMVALUES_PTR:
        {
            if (m_inHeap && m_value.rowRemapperHistogramValuesPtr)
            {
                free(m_value.rowRemapperHistogramValuesPtr);
            }
        }
        break;
        case INJECTION_SAMPLE_PTR:
        {
            if (m_inHeap && m_value.samplePtr)
            {
                free(m_value.samplePtr);
            }
        }
        break;
        case INJECTION_UNITFANSPEEDS_PTR:
        {
            if (m_inHeap && m_value.unitFanSpeedsPtr)
            {
                free(m_value.unitFanSpeedsPtr);
            }
        }
        break;
        case INJECTION_UNITINFO_PTR:
        {
            if (m_inHeap && m_value.unitInfoPtr)
            {
                free(m_value.unitInfoPtr);
            }
        }
        break;
        case INJECTION_UNIT_PTR:
        {
            if (m_inHeap && m_value.unitPtr)
            {
                free(m_value.unitPtr);
            }
        }
        break;
        case INJECTION_UTILIZATION_PTR:
        {
            if (m_inHeap && m_value.utilizationPtr)
            {
                free(m_value.utilizationPtr);
            }
        }
        break;
        case INJECTION_VALUETYPE_PTR:
        {
            if (m_inHeap && m_value.valueTypePtr)
            {
                free(m_value.valueTypePtr);
            }
        }
        break;
        case INJECTION_VGPUINSTANCEUTILIZATIONSAMPLE_PTR:
        {
            if (m_inHeap && m_value.vgpuInstanceUtilizationSamplePtr)
            {
                free(m_value.vgpuInstanceUtilizationSamplePtr);
            }
        }
        break;
        case INJECTION_VGPULICENSEINFO_PTR:
        {
            if (m_inHeap && m_value.vgpuLicenseInfoPtr)
            {
                free(m_value.vgpuLicenseInfoPtr);
            }
        }
        break;
        case INJECTION_VGPUMETADATA_PTR:
        {
            if (m_inHeap && m_value.vgpuMetadataPtr)
            {
                free(m_value.vgpuMetadataPtr);
            }
        }
        break;
        case INJECTION_VGPUPGPUCOMPATIBILITY_PTR:
        {
            if (m_inHeap && m_value.vgpuPgpuCompatibilityPtr)
            {
                free(m_value.vgpuPgpuCompatibilityPtr);
            }
        }
        break;
        case INJECTION_VGPUPGPUMETADATA_PTR:
        {
            if (m_inHeap && m_value.vgpuPgpuMetadataPtr)
            {
                free(m_value.vgpuPgpuMetadataPtr);
            }
        }
        break;
        case INJECTION_VGPUPROCESSUTILIZATIONSAMPLE_PTR:
        {
            if (m_inHeap && m_value.vgpuProcessUtilizationSamplePtr)
            {
                free(m_value.vgpuProcessUtilizationSamplePtr);
            }
        }
        break;
        case INJECTION_VGPUVERSION_PTR:
        {
            if (m_inHeap && m_value.vgpuVersionPtr)
            {
                free(m_value.vgpuVersionPtr);
            }
        }
        break;
        case INJECTION_VGPUVMIDTYPE_PTR:
        {
            if (m_inHeap && m_value.vgpuVmIdTypePtr)
            {
                free(m_value.vgpuVmIdTypePtr);
            }
        }
        break;
        case INJECTION_VIOLATIONTIME_PTR:
        {
            if (m_inHeap && m_value.violationTimePtr)
            {
                free(m_value.violationTimePtr);
            }
        }
        break;
        case INJECTION_UINT_PTR:
        {
            if (m_inHeap && m_value.uiPtr)
            {
                free(m_value.uiPtr);
            }
        }
        break;
        case INJECTION_ULONG_PTR:
        {
            if (m_inHeap && m_value.ulPtr)
            {
                free(m_value.ulPtr);
            }
        }
        break;
        case INJECTION_ULONG_LONG_PTR:
        {
            if (m_inHeap && m_value.ullPtr)
            {
                free(m_value.ullPtr);
            }
        }
        break;
        default:
            break;
    }
}

