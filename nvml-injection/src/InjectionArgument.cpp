/*
 * NOTE: This code is auto-generated by generate_nvml_stubs.py
 * DO NOT EDIT MANUALLY
 */


#include <InjectionArgument.h>
#include <cstring>
#include <limits.h>


nvmlReturn_t InjectionArgument::SetValueFrom(const InjectionArgument &other)
{
    bool set = false;

    if (other.IsEmpty())
    {
        return NVML_ERROR_NOT_FOUND;
    }
    switch (this->m_type)
    {
        case INJECTION_CHAR_PTR:
        {
            if (other.m_type == INJECTION_CHAR_PTR)
            {
                return NVML_ERROR_INVALID_ARGUMENT;
            }
            break;
        }
        case INJECTION_INT:
        {
            if (other.m_type == INJECTION_INT)
            {
                this->m_value.i = other.m_value.i;
                set             = true;
            }
            else if (other.m_type == INJECTION_INT_PTR)
            {
                this->m_value.i = *other.m_value.iPtr;
                set             = true;
            }
            else if (other.m_type == INJECTION_UINT && other.m_value.ui <= INT_MAX)
            {
                this->m_value.i = other.m_value.ui;
                set             = true;
            }
            else if (other.m_type == INJECTION_UINT_PTR && *other.m_value.uiPtr <= INT_MAX)
            {
                this->m_value.i = *other.m_value.uiPtr;
                set             = true;
            }
            break;
        }
        case INJECTION_INT_PTR:
        {
            if (other.m_type == INJECTION_INT_PTR)
            {
                *this->m_value.iPtr = *other.m_value.iPtr;
                set                 = true;
            }
            else if (other.m_type == INJECTION_INT)
            {
                *this->m_value.iPtr = other.m_value.i;
                set                 = true;
            }
            else if (other.m_type == INJECTION_UINT && other.m_value.ui <= INT_MAX)
            {
                *this->m_value.iPtr = other.m_value.ui;
                set                 = true;
            }
            else if (other.m_type == INJECTION_UINT_PTR && *other.m_value.uiPtr <= INT_MAX)
            {
                *this->m_value.iPtr = *other.m_value.uiPtr;
                set                 = true;
            }
            break;
        }
        case INJECTION_ACCOUNTINGSTATS_PTR:
        {
            if (other.m_type == INJECTION_ACCOUNTINGSTATS_PTR)
            {
                memcpy(
                    m_value.accountingStatsPtr, other.m_value.accountingStatsPtr, sizeof(*m_value.accountingStatsPtr));
                set = true;
            }
            break;
        }
        case INJECTION_BAR1MEMORY_PTR:
        {
            if (other.m_type == INJECTION_BAR1MEMORY_PTR)
            {
                memcpy(m_value.bar1MemoryPtr, other.m_value.bar1MemoryPtr, sizeof(*m_value.bar1MemoryPtr));
                set = true;
            }
            break;
        }
        case INJECTION_BRANDTYPE_PTR:
        {
            if (other.m_type == INJECTION_BRANDTYPE_PTR)
            {
                memcpy(m_value.brandTypePtr, other.m_value.brandTypePtr, sizeof(*m_value.brandTypePtr));
                set = true;
            }
            break;
        }
        case INJECTION_BRIDGECHIPHIERARCHY_PTR:
        {
            if (other.m_type == INJECTION_BRIDGECHIPHIERARCHY_PTR)
            {
                memcpy(m_value.bridgeChipHierarchyPtr,
                       other.m_value.bridgeChipHierarchyPtr,
                       sizeof(*m_value.bridgeChipHierarchyPtr));
                set = true;
            }
            break;
        }
        case INJECTION_CLOCKID:
        {
            if (other.m_type == INJECTION_CLOCKID)
            {
                memcpy(&m_value.clockId, &other.m_value.clockId, sizeof(m_value.clockId));
                set = true;
            }
            break;
        }
        case INJECTION_CLOCKTYPE:
        {
            if (other.m_type == INJECTION_CLOCKTYPE)
            {
                memcpy(&m_value.clockType, &other.m_value.clockType, sizeof(m_value.clockType));
                set = true;
            }
            break;
        }
        case INJECTION_COMPUTEINSTANCEINFO_PTR:
        {
            if (other.m_type == INJECTION_COMPUTEINSTANCEINFO_PTR)
            {
                memcpy(m_value.computeInstanceInfoPtr,
                       other.m_value.computeInstanceInfoPtr,
                       sizeof(*m_value.computeInstanceInfoPtr));
                set = true;
            }
            break;
        }
        case INJECTION_COMPUTEINSTANCEPROFILEINFO_PTR:
        {
            if (other.m_type == INJECTION_COMPUTEINSTANCEPROFILEINFO_PTR)
            {
                memcpy(m_value.computeInstanceProfileInfoPtr,
                       other.m_value.computeInstanceProfileInfoPtr,
                       sizeof(*m_value.computeInstanceProfileInfoPtr));
                set = true;
            }
            break;
        }
        case INJECTION_COMPUTEINSTANCEPROFILEINFO_V2_PTR:
        {
            if (other.m_type == INJECTION_COMPUTEINSTANCEPROFILEINFO_V2_PTR)
            {
                memcpy(m_value.computeInstanceProfileInfo_v2Ptr,
                       other.m_value.computeInstanceProfileInfo_v2Ptr,
                       sizeof(*m_value.computeInstanceProfileInfo_v2Ptr));
                set = true;
            }
            break;
        }
        case INJECTION_COMPUTEINSTANCE:
        {
            if (other.m_type == INJECTION_COMPUTEINSTANCE)
            {
                memcpy(&m_value.computeInstance, &other.m_value.computeInstance, sizeof(m_value.computeInstance));
                set = true;
            }
            else if (other.m_type == INJECTION_COMPUTEINSTANCE_PTR)
            {
                memcpy(&m_value.computeInstance, other.m_value.computeInstancePtr, sizeof(m_value.computeInstance));
                set = true;
            }
            break;
        }
        case INJECTION_COMPUTEINSTANCE_PTR:
        {
            if (other.m_type == INJECTION_COMPUTEINSTANCE_PTR)
            {
                memcpy(
                    m_value.computeInstancePtr, other.m_value.computeInstancePtr, sizeof(*m_value.computeInstancePtr));
                set = true;
            }
            else if (other.m_type == INJECTION_COMPUTEINSTANCE)
            {
                memcpy(m_value.computeInstancePtr, &other.m_value.computeInstance, sizeof(*m_value.computeInstancePtr));
                set = true;
            }
            break;
        }
        case INJECTION_COMPUTEMODE:
        {
            if (other.m_type == INJECTION_COMPUTEMODE)
            {
                memcpy(&m_value.computeMode, &other.m_value.computeMode, sizeof(m_value.computeMode));
                set = true;
            }
            else if (other.m_type == INJECTION_COMPUTEMODE_PTR)
            {
                memcpy(&m_value.computeMode, other.m_value.computeModePtr, sizeof(m_value.computeMode));
                set = true;
            }
            break;
        }
        case INJECTION_COMPUTEMODE_PTR:
        {
            if (other.m_type == INJECTION_COMPUTEMODE_PTR)
            {
                memcpy(m_value.computeModePtr, other.m_value.computeModePtr, sizeof(*m_value.computeModePtr));
                set = true;
            }
            else if (other.m_type == INJECTION_COMPUTEMODE)
            {
                memcpy(m_value.computeModePtr, &other.m_value.computeMode, sizeof(*m_value.computeModePtr));
                set = true;
            }
            break;
        }
        case INJECTION_CONFCOMPUTESYSTEMSTATE_PTR:
        {
            if (other.m_type == INJECTION_CONFCOMPUTESYSTEMSTATE_PTR)
            {
                memcpy(m_value.confComputeSystemStatePtr,
                       other.m_value.confComputeSystemStatePtr,
                       sizeof(*m_value.confComputeSystemStatePtr));
                set = true;
            }
            break;
        }
        case INJECTION_DETACHGPUSTATE:
        {
            if (other.m_type == INJECTION_DETACHGPUSTATE)
            {
                memcpy(&m_value.detachGpuState, &other.m_value.detachGpuState, sizeof(m_value.detachGpuState));
                set = true;
            }
            break;
        }
        case INJECTION_DEVICEATTRIBUTES_PTR:
        {
            if (other.m_type == INJECTION_DEVICEATTRIBUTES_PTR)
            {
                memcpy(m_value.deviceAttributesPtr,
                       other.m_value.deviceAttributesPtr,
                       sizeof(*m_value.deviceAttributesPtr));
                set = true;
            }
            break;
        }
        case INJECTION_DEVICE:
        {
            if (other.m_type == INJECTION_DEVICE)
            {
                memcpy(&m_value.device, &other.m_value.device, sizeof(m_value.device));
                set = true;
            }
            else if (other.m_type == INJECTION_DEVICE_PTR)
            {
                memcpy(&m_value.device, other.m_value.devicePtr, sizeof(m_value.device));
                set = true;
            }
            break;
        }
        case INJECTION_DEVICE_PTR:
        {
            if (other.m_type == INJECTION_DEVICE_PTR)
            {
                memcpy(m_value.devicePtr, other.m_value.devicePtr, sizeof(*m_value.devicePtr));
                set = true;
            }
            else if (other.m_type == INJECTION_DEVICE)
            {
                memcpy(m_value.devicePtr, &other.m_value.device, sizeof(*m_value.devicePtr));
                set = true;
            }
            break;
        }
        case INJECTION_DRIVERMODEL:
        {
            if (other.m_type == INJECTION_DRIVERMODEL)
            {
                memcpy(&m_value.driverModel, &other.m_value.driverModel, sizeof(m_value.driverModel));
                set = true;
            }
            else if (other.m_type == INJECTION_DRIVERMODEL_PTR)
            {
                memcpy(&m_value.driverModel, other.m_value.driverModelPtr, sizeof(m_value.driverModel));
                set = true;
            }
            break;
        }
        case INJECTION_DRIVERMODEL_PTR:
        {
            if (other.m_type == INJECTION_DRIVERMODEL_PTR)
            {
                memcpy(m_value.driverModelPtr, other.m_value.driverModelPtr, sizeof(*m_value.driverModelPtr));
                set = true;
            }
            else if (other.m_type == INJECTION_DRIVERMODEL)
            {
                memcpy(m_value.driverModelPtr, &other.m_value.driverModel, sizeof(*m_value.driverModelPtr));
                set = true;
            }
            break;
        }
        case INJECTION_ECCCOUNTERTYPE:
        {
            if (other.m_type == INJECTION_ECCCOUNTERTYPE)
            {
                memcpy(&m_value.eccCounterType, &other.m_value.eccCounterType, sizeof(m_value.eccCounterType));
                set = true;
            }
            break;
        }
        case INJECTION_ECCERRORCOUNTS_PTR:
        {
            if (other.m_type == INJECTION_ECCERRORCOUNTS_PTR)
            {
                memcpy(m_value.eccErrorCountsPtr, other.m_value.eccErrorCountsPtr, sizeof(*m_value.eccErrorCountsPtr));
                set = true;
            }
            break;
        }
        case INJECTION_ENABLESTATE:
        {
            if (other.m_type == INJECTION_ENABLESTATE)
            {
                memcpy(&m_value.enableState, &other.m_value.enableState, sizeof(m_value.enableState));
                set = true;
            }
            else if (other.m_type == INJECTION_ENABLESTATE_PTR)
            {
                memcpy(&m_value.enableState, other.m_value.enableStatePtr, sizeof(m_value.enableState));
                set = true;
            }
            break;
        }
        case INJECTION_ENABLESTATE_PTR:
        {
            if (other.m_type == INJECTION_ENABLESTATE_PTR)
            {
                memcpy(m_value.enableStatePtr, other.m_value.enableStatePtr, sizeof(*m_value.enableStatePtr));
                set = true;
            }
            else if (other.m_type == INJECTION_ENABLESTATE)
            {
                memcpy(m_value.enableStatePtr, &other.m_value.enableState, sizeof(*m_value.enableStatePtr));
                set = true;
            }
            break;
        }
        case INJECTION_ENCODERSESSIONINFO_PTR:
        {
            if (other.m_type == INJECTION_ENCODERSESSIONINFO_PTR)
            {
                memcpy(m_value.encoderSessionInfoPtr,
                       other.m_value.encoderSessionInfoPtr,
                       sizeof(*m_value.encoderSessionInfoPtr));
                set = true;
            }
            break;
        }
        case INJECTION_ENCODERTYPE:
        {
            if (other.m_type == INJECTION_ENCODERTYPE)
            {
                memcpy(&m_value.encoderType, &other.m_value.encoderType, sizeof(m_value.encoderType));
                set = true;
            }
            break;
        }
        case INJECTION_EVENTDATA_PTR:
        {
            if (other.m_type == INJECTION_EVENTDATA_PTR)
            {
                memcpy(m_value.eventDataPtr, other.m_value.eventDataPtr, sizeof(*m_value.eventDataPtr));
                set = true;
            }
            break;
        }
        case INJECTION_EVENTSET:
        {
            if (other.m_type == INJECTION_EVENTSET)
            {
                memcpy(&m_value.eventSet, &other.m_value.eventSet, sizeof(m_value.eventSet));
                set = true;
            }
            else if (other.m_type == INJECTION_EVENTSET_PTR)
            {
                memcpy(&m_value.eventSet, other.m_value.eventSetPtr, sizeof(m_value.eventSet));
                set = true;
            }
            break;
        }
        case INJECTION_EVENTSET_PTR:
        {
            if (other.m_type == INJECTION_EVENTSET_PTR)
            {
                memcpy(m_value.eventSetPtr, other.m_value.eventSetPtr, sizeof(*m_value.eventSetPtr));
                set = true;
            }
            else if (other.m_type == INJECTION_EVENTSET)
            {
                memcpy(m_value.eventSetPtr, &other.m_value.eventSet, sizeof(*m_value.eventSetPtr));
                set = true;
            }
            break;
        }
        case INJECTION_EXCLUDEDDEVICEINFO_PTR:
        {
            if (other.m_type == INJECTION_EXCLUDEDDEVICEINFO_PTR)
            {
                memcpy(m_value.excludedDeviceInfoPtr,
                       other.m_value.excludedDeviceInfoPtr,
                       sizeof(*m_value.excludedDeviceInfoPtr));
                set = true;
            }
            break;
        }
        case INJECTION_FBCSESSIONINFO_PTR:
        {
            if (other.m_type == INJECTION_FBCSESSIONINFO_PTR)
            {
                memcpy(m_value.fBCSessionInfoPtr, other.m_value.fBCSessionInfoPtr, sizeof(*m_value.fBCSessionInfoPtr));
                set = true;
            }
            break;
        }
        case INJECTION_FBCSTATS_PTR:
        {
            if (other.m_type == INJECTION_FBCSTATS_PTR)
            {
                memcpy(m_value.fBCStatsPtr, other.m_value.fBCStatsPtr, sizeof(*m_value.fBCStatsPtr));
                set = true;
            }
            break;
        }
        case INJECTION_FIELDVALUE_PTR:
        {
            if (other.m_type == INJECTION_FIELDVALUE_PTR)
            {
                memcpy(m_value.fieldValuePtr, other.m_value.fieldValuePtr, sizeof(*m_value.fieldValuePtr));
                set = true;
            }
            break;
        }
        case INJECTION_GPMMETRICSGET_PTR:
        {
            if (other.m_type == INJECTION_GPMMETRICSGET_PTR)
            {
                memcpy(m_value.gpmMetricsGetPtr, other.m_value.gpmMetricsGetPtr, sizeof(*m_value.gpmMetricsGetPtr));
                set = true;
            }
            break;
        }
        case INJECTION_GPMSAMPLE:
        {
            if (other.m_type == INJECTION_GPMSAMPLE)
            {
                memcpy(&m_value.gpmSample, &other.m_value.gpmSample, sizeof(m_value.gpmSample));
                set = true;
            }
            else if (other.m_type == INJECTION_GPMSAMPLE_PTR)
            {
                memcpy(&m_value.gpmSample, other.m_value.gpmSamplePtr, sizeof(m_value.gpmSample));
                set = true;
            }
            break;
        }
        case INJECTION_GPMSAMPLE_PTR:
        {
            if (other.m_type == INJECTION_GPMSAMPLE_PTR)
            {
                memcpy(m_value.gpmSamplePtr, other.m_value.gpmSamplePtr, sizeof(*m_value.gpmSamplePtr));
                set = true;
            }
            else if (other.m_type == INJECTION_GPMSAMPLE)
            {
                memcpy(m_value.gpmSamplePtr, &other.m_value.gpmSample, sizeof(*m_value.gpmSamplePtr));
                set = true;
            }
            break;
        }
        case INJECTION_GPMSUPPORT_PTR:
        {
            if (other.m_type == INJECTION_GPMSUPPORT_PTR)
            {
                memcpy(m_value.gpmSupportPtr, other.m_value.gpmSupportPtr, sizeof(*m_value.gpmSupportPtr));
                set = true;
            }
            break;
        }
        case INJECTION_GPUDYNAMICPSTATESINFO_PTR:
        {
            if (other.m_type == INJECTION_GPUDYNAMICPSTATESINFO_PTR)
            {
                memcpy(m_value.gpuDynamicPstatesInfoPtr,
                       other.m_value.gpuDynamicPstatesInfoPtr,
                       sizeof(*m_value.gpuDynamicPstatesInfoPtr));
                set = true;
            }
            break;
        }
        case INJECTION_GPUINSTANCEINFO_PTR:
        {
            if (other.m_type == INJECTION_GPUINSTANCEINFO_PTR)
            {
                memcpy(
                    m_value.gpuInstanceInfoPtr, other.m_value.gpuInstanceInfoPtr, sizeof(*m_value.gpuInstanceInfoPtr));
                set = true;
            }
            break;
        }
        case INJECTION_GPUINSTANCEPLACEMENT_PTR:
        {
            if (other.m_type == INJECTION_GPUINSTANCEPLACEMENT_PTR)
            {
                memcpy(m_value.gpuInstancePlacementPtr,
                       other.m_value.gpuInstancePlacementPtr,
                       sizeof(*m_value.gpuInstancePlacementPtr));
                set = true;
            }
            break;
        }
        case INJECTION_GPUINSTANCEPROFILEINFO_PTR:
        {
            if (other.m_type == INJECTION_GPUINSTANCEPROFILEINFO_PTR)
            {
                memcpy(m_value.gpuInstanceProfileInfoPtr,
                       other.m_value.gpuInstanceProfileInfoPtr,
                       sizeof(*m_value.gpuInstanceProfileInfoPtr));
                set = true;
            }
            break;
        }
        case INJECTION_GPUINSTANCEPROFILEINFO_V2_PTR:
        {
            if (other.m_type == INJECTION_GPUINSTANCEPROFILEINFO_V2_PTR)
            {
                memcpy(m_value.gpuInstanceProfileInfo_v2Ptr,
                       other.m_value.gpuInstanceProfileInfo_v2Ptr,
                       sizeof(*m_value.gpuInstanceProfileInfo_v2Ptr));
                set = true;
            }
            break;
        }
        case INJECTION_GPUINSTANCE:
        {
            if (other.m_type == INJECTION_GPUINSTANCE)
            {
                memcpy(&m_value.gpuInstance, &other.m_value.gpuInstance, sizeof(m_value.gpuInstance));
                set = true;
            }
            else if (other.m_type == INJECTION_GPUINSTANCE_PTR)
            {
                memcpy(&m_value.gpuInstance, other.m_value.gpuInstancePtr, sizeof(m_value.gpuInstance));
                set = true;
            }
            break;
        }
        case INJECTION_GPUINSTANCE_PTR:
        {
            if (other.m_type == INJECTION_GPUINSTANCE_PTR)
            {
                memcpy(m_value.gpuInstancePtr, other.m_value.gpuInstancePtr, sizeof(*m_value.gpuInstancePtr));
                set = true;
            }
            else if (other.m_type == INJECTION_GPUINSTANCE)
            {
                memcpy(m_value.gpuInstancePtr, &other.m_value.gpuInstance, sizeof(*m_value.gpuInstancePtr));
                set = true;
            }
            break;
        }
        case INJECTION_GPUOPERATIONMODE:
        {
            if (other.m_type == INJECTION_GPUOPERATIONMODE)
            {
                memcpy(&m_value.gpuOperationMode, &other.m_value.gpuOperationMode, sizeof(m_value.gpuOperationMode));
                set = true;
            }
            else if (other.m_type == INJECTION_GPUOPERATIONMODE_PTR)
            {
                memcpy(&m_value.gpuOperationMode, other.m_value.gpuOperationModePtr, sizeof(m_value.gpuOperationMode));
                set = true;
            }
            break;
        }
        case INJECTION_GPUOPERATIONMODE_PTR:
        {
            if (other.m_type == INJECTION_GPUOPERATIONMODE_PTR)
            {
                memcpy(m_value.gpuOperationModePtr,
                       other.m_value.gpuOperationModePtr,
                       sizeof(*m_value.gpuOperationModePtr));
                set = true;
            }
            else if (other.m_type == INJECTION_GPUOPERATIONMODE)
            {
                memcpy(
                    m_value.gpuOperationModePtr, &other.m_value.gpuOperationMode, sizeof(*m_value.gpuOperationModePtr));
                set = true;
            }
            break;
        }
        case INJECTION_GPUP2PCAPSINDEX:
        {
            if (other.m_type == INJECTION_GPUP2PCAPSINDEX)
            {
                memcpy(&m_value.gpuP2PCapsIndex, &other.m_value.gpuP2PCapsIndex, sizeof(m_value.gpuP2PCapsIndex));
                set = true;
            }
            break;
        }
        case INJECTION_GPUP2PSTATUS_PTR:
        {
            if (other.m_type == INJECTION_GPUP2PSTATUS_PTR)
            {
                memcpy(m_value.gpuP2PStatusPtr, other.m_value.gpuP2PStatusPtr, sizeof(*m_value.gpuP2PStatusPtr));
                set = true;
            }
            break;
        }
        case INJECTION_GPUTHERMALSETTINGS_PTR:
        {
            if (other.m_type == INJECTION_GPUTHERMALSETTINGS_PTR)
            {
                memcpy(m_value.gpuThermalSettingsPtr,
                       other.m_value.gpuThermalSettingsPtr,
                       sizeof(*m_value.gpuThermalSettingsPtr));
                set = true;
            }
            break;
        }
        case INJECTION_GPUTOPOLOGYLEVEL:
        {
            if (other.m_type == INJECTION_GPUTOPOLOGYLEVEL)
            {
                memcpy(&m_value.gpuTopologyLevel, &other.m_value.gpuTopologyLevel, sizeof(m_value.gpuTopologyLevel));
                set = true;
            }
            else if (other.m_type == INJECTION_GPUTOPOLOGYLEVEL_PTR)
            {
                memcpy(&m_value.gpuTopologyLevel, other.m_value.gpuTopologyLevelPtr, sizeof(m_value.gpuTopologyLevel));
                set = true;
            }
            break;
        }
        case INJECTION_GPUTOPOLOGYLEVEL_PTR:
        {
            if (other.m_type == INJECTION_GPUTOPOLOGYLEVEL_PTR)
            {
                memcpy(m_value.gpuTopologyLevelPtr,
                       other.m_value.gpuTopologyLevelPtr,
                       sizeof(*m_value.gpuTopologyLevelPtr));
                set = true;
            }
            else if (other.m_type == INJECTION_GPUTOPOLOGYLEVEL)
            {
                memcpy(
                    m_value.gpuTopologyLevelPtr, &other.m_value.gpuTopologyLevel, sizeof(*m_value.gpuTopologyLevelPtr));
                set = true;
            }
            break;
        }
        case INJECTION_GPUVIRTUALIZATIONMODE:
        {
            if (other.m_type == INJECTION_GPUVIRTUALIZATIONMODE)
            {
                memcpy(&m_value.gpuVirtualizationMode,
                       &other.m_value.gpuVirtualizationMode,
                       sizeof(m_value.gpuVirtualizationMode));
                set = true;
            }
            else if (other.m_type == INJECTION_GPUVIRTUALIZATIONMODE_PTR)
            {
                memcpy(&m_value.gpuVirtualizationMode,
                       other.m_value.gpuVirtualizationModePtr,
                       sizeof(m_value.gpuVirtualizationMode));
                set = true;
            }
            break;
        }
        case INJECTION_GPUVIRTUALIZATIONMODE_PTR:
        {
            if (other.m_type == INJECTION_GPUVIRTUALIZATIONMODE_PTR)
            {
                memcpy(m_value.gpuVirtualizationModePtr,
                       other.m_value.gpuVirtualizationModePtr,
                       sizeof(*m_value.gpuVirtualizationModePtr));
                set = true;
            }
            else if (other.m_type == INJECTION_GPUVIRTUALIZATIONMODE)
            {
                memcpy(m_value.gpuVirtualizationModePtr,
                       &other.m_value.gpuVirtualizationMode,
                       sizeof(*m_value.gpuVirtualizationModePtr));
                set = true;
            }
            break;
        }
        case INJECTION_GRIDLICENSABLEFEATURES_PTR:
        {
            if (other.m_type == INJECTION_GRIDLICENSABLEFEATURES_PTR)
            {
                memcpy(m_value.gridLicensableFeaturesPtr,
                       other.m_value.gridLicensableFeaturesPtr,
                       sizeof(*m_value.gridLicensableFeaturesPtr));
                set = true;
            }
            break;
        }
        case INJECTION_HOSTVGPUMODE_PTR:
        {
            if (other.m_type == INJECTION_HOSTVGPUMODE_PTR)
            {
                memcpy(m_value.hostVgpuModePtr, other.m_value.hostVgpuModePtr, sizeof(*m_value.hostVgpuModePtr));
                set = true;
            }
            break;
        }
        case INJECTION_HWBCENTRY_PTR:
        {
            if (other.m_type == INJECTION_HWBCENTRY_PTR)
            {
                memcpy(m_value.hwbcEntryPtr, other.m_value.hwbcEntryPtr, sizeof(*m_value.hwbcEntryPtr));
                set = true;
            }
            break;
        }
        case INJECTION_INFOROMOBJECT:
        {
            if (other.m_type == INJECTION_INFOROMOBJECT)
            {
                memcpy(&m_value.inforomObject, &other.m_value.inforomObject, sizeof(m_value.inforomObject));
                set = true;
            }
            break;
        }
        case INJECTION_INTNVLINKDEVICETYPE_PTR:
        {
            if (other.m_type == INJECTION_INTNVLINKDEVICETYPE_PTR)
            {
                memcpy(m_value.intNvLinkDeviceTypePtr,
                       other.m_value.intNvLinkDeviceTypePtr,
                       sizeof(*m_value.intNvLinkDeviceTypePtr));
                set = true;
            }
            break;
        }
        case INJECTION_LEDCOLOR:
        {
            if (other.m_type == INJECTION_LEDCOLOR)
            {
                memcpy(&m_value.ledColor, &other.m_value.ledColor, sizeof(m_value.ledColor));
                set = true;
            }
            break;
        }
        case INJECTION_LEDSTATE_PTR:
        {
            if (other.m_type == INJECTION_LEDSTATE_PTR)
            {
                memcpy(m_value.ledStatePtr, other.m_value.ledStatePtr, sizeof(*m_value.ledStatePtr));
                set = true;
            }
            break;
        }
        case INJECTION_MEMORYERRORTYPE:
        {
            if (other.m_type == INJECTION_MEMORYERRORTYPE)
            {
                memcpy(&m_value.memoryErrorType, &other.m_value.memoryErrorType, sizeof(m_value.memoryErrorType));
                set = true;
            }
            break;
        }
        case INJECTION_MEMORYLOCATION:
        {
            if (other.m_type == INJECTION_MEMORYLOCATION)
            {
                memcpy(&m_value.memoryLocation, &other.m_value.memoryLocation, sizeof(m_value.memoryLocation));
                set = true;
            }
            break;
        }
        case INJECTION_MEMORY_PTR:
        {
            if (other.m_type == INJECTION_MEMORY_PTR)
            {
                memcpy(m_value.memoryPtr, other.m_value.memoryPtr, sizeof(*m_value.memoryPtr));
                set = true;
            }
            break;
        }
        case INJECTION_MEMORY_V2_PTR:
        {
            if (other.m_type == INJECTION_MEMORY_V2_PTR)
            {
                memcpy(m_value.memory_v2Ptr, other.m_value.memory_v2Ptr, sizeof(*m_value.memory_v2Ptr));
                set = true;
            }
            break;
        }
        case INJECTION_NVLINKCAPABILITY:
        {
            if (other.m_type == INJECTION_NVLINKCAPABILITY)
            {
                memcpy(&m_value.nvLinkCapability, &other.m_value.nvLinkCapability, sizeof(m_value.nvLinkCapability));
                set = true;
            }
            break;
        }
        case INJECTION_NVLINKERRORCOUNTER:
        {
            if (other.m_type == INJECTION_NVLINKERRORCOUNTER)
            {
                memcpy(
                    &m_value.nvLinkErrorCounter, &other.m_value.nvLinkErrorCounter, sizeof(m_value.nvLinkErrorCounter));
                set = true;
            }
            break;
        }
        case INJECTION_NVLINKUTILIZATIONCONTROL_PTR:
        {
            if (other.m_type == INJECTION_NVLINKUTILIZATIONCONTROL_PTR)
            {
                memcpy(m_value.nvLinkUtilizationControlPtr,
                       other.m_value.nvLinkUtilizationControlPtr,
                       sizeof(*m_value.nvLinkUtilizationControlPtr));
                set = true;
            }
            break;
        }
        case INJECTION_PSUINFO_PTR:
        {
            if (other.m_type == INJECTION_PSUINFO_PTR)
            {
                memcpy(m_value.pSUInfoPtr, other.m_value.pSUInfoPtr, sizeof(*m_value.pSUInfoPtr));
                set = true;
            }
            break;
        }
        case INJECTION_PAGERETIREMENTCAUSE:
        {
            if (other.m_type == INJECTION_PAGERETIREMENTCAUSE)
            {
                memcpy(&m_value.pageRetirementCause,
                       &other.m_value.pageRetirementCause,
                       sizeof(m_value.pageRetirementCause));
                set = true;
            }
            break;
        }
        case INJECTION_PCIINFO_PTR:
        {
            if (other.m_type == INJECTION_PCIINFO_PTR)
            {
                memcpy(m_value.pciInfoPtr, other.m_value.pciInfoPtr, sizeof(*m_value.pciInfoPtr));
                set = true;
            }
            break;
        }
        case INJECTION_PCIELINKSTATE:
        {
            if (other.m_type == INJECTION_PCIELINKSTATE)
            {
                memcpy(&m_value.pcieLinkState, &other.m_value.pcieLinkState, sizeof(m_value.pcieLinkState));
                set = true;
            }
            break;
        }
        case INJECTION_PCIEUTILCOUNTER:
        {
            if (other.m_type == INJECTION_PCIEUTILCOUNTER)
            {
                memcpy(&m_value.pcieUtilCounter, &other.m_value.pcieUtilCounter, sizeof(m_value.pcieUtilCounter));
                set = true;
            }
            break;
        }
        case INJECTION_PERFPOLICYTYPE:
        {
            if (other.m_type == INJECTION_PERFPOLICYTYPE)
            {
                memcpy(&m_value.perfPolicyType, &other.m_value.perfPolicyType, sizeof(m_value.perfPolicyType));
                set = true;
            }
            break;
        }
        case INJECTION_PROCESSINFO_PTR:
        {
            if (other.m_type == INJECTION_PROCESSINFO_PTR)
            {
                memcpy(m_value.processInfoPtr, other.m_value.processInfoPtr, sizeof(*m_value.processInfoPtr));
                set = true;
            }
            break;
        }
        case INJECTION_PROCESSINFO_V1_PTR:
        {
            if (other.m_type == INJECTION_PROCESSINFO_V1_PTR)
            {
                memcpy(m_value.processInfo_v1Ptr, other.m_value.processInfo_v1Ptr, sizeof(*m_value.processInfo_v1Ptr));
                set = true;
            }
            break;
        }
        case INJECTION_PROCESSINFO_V2_PTR:
        {
            if (other.m_type == INJECTION_PROCESSINFO_V2_PTR)
            {
                memcpy(m_value.processInfo_v2Ptr, other.m_value.processInfo_v2Ptr, sizeof(*m_value.processInfo_v2Ptr));
                set = true;
            }
            break;
        }
        case INJECTION_PROCESSUTILIZATIONSAMPLE_PTR:
        {
            if (other.m_type == INJECTION_PROCESSUTILIZATIONSAMPLE_PTR)
            {
                memcpy(m_value.processUtilizationSamplePtr,
                       other.m_value.processUtilizationSamplePtr,
                       sizeof(*m_value.processUtilizationSamplePtr));
                set = true;
            }
            break;
        }
        case INJECTION_PSTATES:
        {
            if (other.m_type == INJECTION_PSTATES)
            {
                memcpy(&m_value.pstates, &other.m_value.pstates, sizeof(m_value.pstates));
                set = true;
            }
            else if (other.m_type == INJECTION_PSTATES_PTR)
            {
                memcpy(&m_value.pstates, other.m_value.pstatesPtr, sizeof(m_value.pstates));
                set = true;
            }
            break;
        }
        case INJECTION_PSTATES_PTR:
        {
            if (other.m_type == INJECTION_PSTATES_PTR)
            {
                memcpy(m_value.pstatesPtr, other.m_value.pstatesPtr, sizeof(*m_value.pstatesPtr));
                set = true;
            }
            else if (other.m_type == INJECTION_PSTATES)
            {
                memcpy(m_value.pstatesPtr, &other.m_value.pstates, sizeof(*m_value.pstatesPtr));
                set = true;
            }
            break;
        }
        case INJECTION_RESTRICTEDAPI:
        {
            if (other.m_type == INJECTION_RESTRICTEDAPI)
            {
                memcpy(&m_value.restrictedAPI, &other.m_value.restrictedAPI, sizeof(m_value.restrictedAPI));
                set = true;
            }
            break;
        }
        case INJECTION_RETURN_PTR:
        {
            if (other.m_type == INJECTION_RETURN_PTR)
            {
                memcpy(m_value.returnPtr, other.m_value.returnPtr, sizeof(*m_value.returnPtr));
                set = true;
            }
            break;
        }
        case INJECTION_ROWREMAPPERHISTOGRAMVALUES_PTR:
        {
            if (other.m_type == INJECTION_ROWREMAPPERHISTOGRAMVALUES_PTR)
            {
                memcpy(m_value.rowRemapperHistogramValuesPtr,
                       other.m_value.rowRemapperHistogramValuesPtr,
                       sizeof(*m_value.rowRemapperHistogramValuesPtr));
                set = true;
            }
            break;
        }
        case INJECTION_SAMPLE_PTR:
        {
            if (other.m_type == INJECTION_SAMPLE_PTR)
            {
                memcpy(m_value.samplePtr, other.m_value.samplePtr, sizeof(*m_value.samplePtr));
                set = true;
            }
            break;
        }
        case INJECTION_SAMPLINGTYPE:
        {
            if (other.m_type == INJECTION_SAMPLINGTYPE)
            {
                memcpy(&m_value.samplingType, &other.m_value.samplingType, sizeof(m_value.samplingType));
                set = true;
            }
            break;
        }
        case INJECTION_TEMPERATURESENSORS:
        {
            if (other.m_type == INJECTION_TEMPERATURESENSORS)
            {
                memcpy(
                    &m_value.temperatureSensors, &other.m_value.temperatureSensors, sizeof(m_value.temperatureSensors));
                set = true;
            }
            break;
        }
        case INJECTION_TEMPERATURETHRESHOLDS:
        {
            if (other.m_type == INJECTION_TEMPERATURETHRESHOLDS)
            {
                memcpy(&m_value.temperatureThresholds,
                       &other.m_value.temperatureThresholds,
                       sizeof(m_value.temperatureThresholds));
                set = true;
            }
            break;
        }
        case INJECTION_UNITFANSPEEDS_PTR:
        {
            if (other.m_type == INJECTION_UNITFANSPEEDS_PTR)
            {
                memcpy(m_value.unitFanSpeedsPtr, other.m_value.unitFanSpeedsPtr, sizeof(*m_value.unitFanSpeedsPtr));
                set = true;
            }
            break;
        }
        case INJECTION_UNITINFO_PTR:
        {
            if (other.m_type == INJECTION_UNITINFO_PTR)
            {
                memcpy(m_value.unitInfoPtr, other.m_value.unitInfoPtr, sizeof(*m_value.unitInfoPtr));
                set = true;
            }
            break;
        }
        case INJECTION_UNIT:
        {
            if (other.m_type == INJECTION_UNIT)
            {
                memcpy(&m_value.unit, &other.m_value.unit, sizeof(m_value.unit));
                set = true;
            }
            else if (other.m_type == INJECTION_UNIT_PTR)
            {
                memcpy(&m_value.unit, other.m_value.unitPtr, sizeof(m_value.unit));
                set = true;
            }
            break;
        }
        case INJECTION_UNIT_PTR:
        {
            if (other.m_type == INJECTION_UNIT_PTR)
            {
                memcpy(m_value.unitPtr, other.m_value.unitPtr, sizeof(*m_value.unitPtr));
                set = true;
            }
            else if (other.m_type == INJECTION_UNIT)
            {
                memcpy(m_value.unitPtr, &other.m_value.unit, sizeof(*m_value.unitPtr));
                set = true;
            }
            break;
        }
        case INJECTION_UTILIZATION_PTR:
        {
            if (other.m_type == INJECTION_UTILIZATION_PTR)
            {
                memcpy(m_value.utilizationPtr, other.m_value.utilizationPtr, sizeof(*m_value.utilizationPtr));
                set = true;
            }
            break;
        }
        case INJECTION_VALUETYPE_PTR:
        {
            if (other.m_type == INJECTION_VALUETYPE_PTR)
            {
                memcpy(m_value.valueTypePtr, other.m_value.valueTypePtr, sizeof(*m_value.valueTypePtr));
                set = true;
            }
            break;
        }
        case INJECTION_VGPUCAPABILITY:
        {
            if (other.m_type == INJECTION_VGPUCAPABILITY)
            {
                memcpy(&m_value.vgpuCapability, &other.m_value.vgpuCapability, sizeof(m_value.vgpuCapability));
                set = true;
            }
            break;
        }
        case INJECTION_VGPUINSTANCEUTILIZATIONSAMPLE_PTR:
        {
            if (other.m_type == INJECTION_VGPUINSTANCEUTILIZATIONSAMPLE_PTR)
            {
                memcpy(m_value.vgpuInstanceUtilizationSamplePtr,
                       other.m_value.vgpuInstanceUtilizationSamplePtr,
                       sizeof(*m_value.vgpuInstanceUtilizationSamplePtr));
                set = true;
            }
            break;
        }
        case INJECTION_VGPULICENSEINFO_PTR:
        {
            if (other.m_type == INJECTION_VGPULICENSEINFO_PTR)
            {
                memcpy(
                    m_value.vgpuLicenseInfoPtr, other.m_value.vgpuLicenseInfoPtr, sizeof(*m_value.vgpuLicenseInfoPtr));
                set = true;
            }
            break;
        }
        case INJECTION_VGPUMETADATA_PTR:
        {
            if (other.m_type == INJECTION_VGPUMETADATA_PTR)
            {
                memcpy(m_value.vgpuMetadataPtr, other.m_value.vgpuMetadataPtr, sizeof(*m_value.vgpuMetadataPtr));
                set = true;
            }
            break;
        }
        case INJECTION_VGPUPGPUCOMPATIBILITY_PTR:
        {
            if (other.m_type == INJECTION_VGPUPGPUCOMPATIBILITY_PTR)
            {
                memcpy(m_value.vgpuPgpuCompatibilityPtr,
                       other.m_value.vgpuPgpuCompatibilityPtr,
                       sizeof(*m_value.vgpuPgpuCompatibilityPtr));
                set = true;
            }
            break;
        }
        case INJECTION_VGPUPGPUMETADATA_PTR:
        {
            if (other.m_type == INJECTION_VGPUPGPUMETADATA_PTR)
            {
                memcpy(m_value.vgpuPgpuMetadataPtr,
                       other.m_value.vgpuPgpuMetadataPtr,
                       sizeof(*m_value.vgpuPgpuMetadataPtr));
                set = true;
            }
            break;
        }
        case INJECTION_VGPUPROCESSUTILIZATIONSAMPLE_PTR:
        {
            if (other.m_type == INJECTION_VGPUPROCESSUTILIZATIONSAMPLE_PTR)
            {
                memcpy(m_value.vgpuProcessUtilizationSamplePtr,
                       other.m_value.vgpuProcessUtilizationSamplePtr,
                       sizeof(*m_value.vgpuProcessUtilizationSamplePtr));
                set = true;
            }
            break;
        }
        case INJECTION_VGPUVERSION_PTR:
        {
            if (other.m_type == INJECTION_VGPUVERSION_PTR)
            {
                memcpy(m_value.vgpuVersionPtr, other.m_value.vgpuVersionPtr, sizeof(*m_value.vgpuVersionPtr));
                set = true;
            }
            break;
        }
        case INJECTION_VGPUVMIDTYPE_PTR:
        {
            if (other.m_type == INJECTION_VGPUVMIDTYPE_PTR)
            {
                memcpy(m_value.vgpuVmIdTypePtr, other.m_value.vgpuVmIdTypePtr, sizeof(*m_value.vgpuVmIdTypePtr));
                set = true;
            }
            break;
        }
        case INJECTION_VIOLATIONTIME_PTR:
        {
            if (other.m_type == INJECTION_VIOLATIONTIME_PTR)
            {
                memcpy(m_value.violationTimePtr, other.m_value.violationTimePtr, sizeof(*m_value.violationTimePtr));
                set = true;
            }
            break;
        }
        case INJECTION_UINT:
        {
            if (other.m_type == INJECTION_UINT)
            {
                this->m_value.ui = other.m_value.ui;
                set              = true;
            }
            else if (other.m_type == INJECTION_UINT_PTR)
            {
                this->m_value.ui = *other.m_value.uiPtr;
                set              = true;
            }
            else if (other.m_type == INJECTION_INT && other.m_value.i > 0)
            {
                this->m_value.ui = other.m_value.i;
                set              = true;
            }
            else if (other.m_type == INJECTION_INT_PTR && *other.m_value.iPtr > 0)
            {
                this->m_value.ui = *other.m_value.iPtr;
                set              = true;
            }
            break;
        }
        case INJECTION_UINT_PTR:
        {
            if (other.m_type == INJECTION_UINT_PTR)
            {
                *this->m_value.uiPtr = *other.m_value.uiPtr;
                set                  = true;
            }
            else if (other.m_type == INJECTION_UINT)
            {
                *this->m_value.uiPtr = other.m_value.ui;
                set                  = true;
            }
            else if (other.m_type == INJECTION_INT && other.m_value.i > 0)
            {
                *this->m_value.uiPtr = other.m_value.i;
                set                  = true;
            }
            else if (other.m_type == INJECTION_INT_PTR && *other.m_value.iPtr > 0)
            {
                *this->m_value.uiPtr = *other.m_value.iPtr;
                set                  = true;
            }
            break;
        }
        case INJECTION_ULONG_PTR:
        {
            if (other.m_type == INJECTION_ULONG_PTR)
            {
                *this->m_value.ulPtr = *other.m_value.ulPtr;
                set                  = true;
            }
            break;
        }
        case INJECTION_ULONG_LONG:
        {
            if (other.m_type == INJECTION_ULONG_LONG)
            {
                this->m_value.ull = other.m_value.ull;
                set               = true;
            }
            else if (other.m_type == INJECTION_ULONG_LONG_PTR)
            {
                this->m_value.ull = *other.m_value.ullPtr;
                set               = true;
            }
            break;
        }
        case INJECTION_ULONG_LONG_PTR:
        {
            if (other.m_type == INJECTION_ULONG_LONG_PTR)
            {
                *this->m_value.ullPtr = *other.m_value.ullPtr;
                set                   = true;
            }
            else if (other.m_type == INJECTION_ULONG_LONG)
            {
                *this->m_value.ullPtr = other.m_value.ull;
                set                   = true;
            }
            break;
        }
        case INJECTION_STRING:
        {
            if (other.m_type == INJECTION_STRING)
            {
                this->m_str = other.m_str;
                set         = true;
            }
            else if (other.m_type == INJECTION_CHAR_PTR && other.m_value.str != nullptr)
            {
                this->m_str = other.m_value.str;
                set         = true;
            }
            else if (other.m_type == INJECTION_CONST_CHAR_PTR && other.m_value.const_str != nullptr)
            {
                this->m_str = other.m_value.const_str;
                set         = true;
            }
            break;
        }
        default:
            break;
    }
    if (set)
    {
        return NVML_SUCCESS;
    }
    else
    {
        return NVML_ERROR_INVALID_ARGUMENT;
    }
}
